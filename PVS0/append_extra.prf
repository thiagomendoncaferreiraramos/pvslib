(append_extra
 (append_eq_length_right 0
  (append_eq_length_right-1 nil 3829757167
   ("" (measure-induct+ "length(l1)" "l1")
    (("" (skeep)
      (("" (prop)
        (("1" (expand "append" -1 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "length" -3 1)
                (("1" (assert)
                  (("1" (case "length(l3)=0")
                    (("1" (hide -4)
                      (("1" (rewrite "length_null_list")
                        (("1" (expand "append" -3)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -3 "cdr(x!1)")
                (("2" (expand "append" -1 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "length" -3 2)
                        (("1" (assert)
                          (("1" (rewrite "length_null_list") nil nil))
                          nil))
                        nil)
                       ("2" (decompose-equality)
                        (("2" (inst -4 "l2" "cdr(l3)" "l4")
                          (("2" (expand "length" -4 2)
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "length" -2 1)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (case "length(l3) = 0")
                (("1" (rewrite "length_null_list")
                  (("1" (assert) nil nil)) nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (expand "append" -2 1)
                (("2" (assert)
                  (("2" (expand "append" -2 2)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (rewrite "length_null_list" :dir rl) nil
                          nil)
                         ("2" (decompose-equality -1)
                          (("2" (inst -4 "cdr(x!1)")
                            (("2" (inst -4 "l2" "cdr(l3)" "l4")
                              (("2"
                                (expand "length" -4 2)
                                (("2"
                                  (expand "length" -3 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (decompose-equality 3)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil))
        nil))
      nil))
    nil)
   ((list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_null_list formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil append_extra nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (append_eq_right 0
  (append_eq_right-1 nil 3829827452
   ("" (skeep)
    (("" (lemma "append_eq_length_right") (("" (inst?) nil nil)) nil))
    nil)
   ((append_eq_length_right formula-decl nil append_extra nil)
    (T formal-type-decl nil append_extra nil)
    (list type-decl nil list_adt nil))
   shostak)))

