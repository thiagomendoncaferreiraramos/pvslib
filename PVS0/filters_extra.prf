(filters_extra
 (filter_subset_list 0
  (filter_subset_list-1 nil 3829747663
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "filter" 1)
        (("2" (case "P(cons1_var)")
          (("1" (assert)
            (("1" (expand "nth" 1 1)
              (("1" (case "i=0")
                (("1" (assert)
                  (("1" (inst 1 "0")
                    (("1" (hide -) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst -2 "P" "i-1")
                    (("1" (skeep)
                      (("1" (inst 2 "j+1")
                        (("1" (expand "nth" 2 2)
                          (("1" (propax) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (typepred "i") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (inst -1 "P" "i")
              (("1" (skeep)
                (("1" (inst 2 "j+1")
                  (("1" (expand "nth" 2 2) (("1" (propax) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (typepred "i") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil) nil
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (T formal-type-decl nil filters_extra nil)
    (list_induction formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (filter_nth 0
  (filter_nth-2 nil 3829747778
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (prop)
        (("1" (expand "nth" -1)
          (("1" (prop)
            (("1" (expand "nth" 1 1)
              (("1" (assert)
                (("1" (expand "filter" 1)
                  (("1" (inst 1 "0")
                    (("1" (expand "nth" 1) (("1" (propax) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" 2 1)
              (("2" (assert)
                (("2" (inst -2 "P" "i-1")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (replaces -2)
                        (("2" (expand "filter" 2 2)
                          (("2" (case "P(cons1_var)")
                            (("1" (assert)
                              (("1"
                                (inst 2 "j+1")
                                (("1"
                                  (expand "nth" 2 2)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (inst 3 "j")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nth" 1)
          (("2" (prop)
            (("1" (replace -1)
              (("1" (expand "nth" -2 1)
                (("1" (expand "filter" -2)
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (use "filter_subset_list")
                        (("1" (skeep)
                          (("1" (replace -1)
                            (("1" (replaces -3)
                              (("1"
                                (inst -3 "P" "j_1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst 2 "j")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" -1 1)
              (("2" (assert)
                (("2" (expand "filter" -1)
                  (("2" (case " P(cons1_var)")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (expand "nth" -2 2)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1" (assert) nil nil)
                               ("2"
                                (inst -3 "P" "i-1")
                                (("2"
                                  (assert)
                                  (("2" (inst 4 "j-1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (skeep)
                        (("2" (inst -2 "P" "i-1")
                          (("2" (assert) (("2" (inst 4 "j") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil filters_extra nil)
    (list_induction formula-decl nil list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (filter_subset_list formula-decl nil filters_extra nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (filter_nth-1 nil 3829747686 ("" (postpone) nil nil) nil shostak))
 (filter_P 0
  (filter_P-1 nil 3830004747
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (expand "filter" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (typepred "i") (("1" (grind) nil nil)) nil)
             ("2" (expand "nth" 1)
              (("2" (prop)
                (("2" (inst -2 "cdr(x!1)")
                  (("2" (inst?)
                    (("1" (expand "length" -2 2)
                      (("1" (assert) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (inst -1 "cdr(x!1)")
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (expand "length" -1 2) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below[length(filter(P)(x!1))]" filters_extra
       nil)
    (x!1 skolem-const-decl "list[T]" filters_extra nil)
    (P skolem-const-decl "pred[T]" filters_extra nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (filter def-decl "list[T]" filters nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil filters_extra nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

