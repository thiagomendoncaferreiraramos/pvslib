(pcp
 (append_domino_TCC1 0
  (append_domino_TCC1-1 nil 3811688009 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (char type-eq-decl nil pcp nil) (Piece type-eq-decl nil pcp nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (append_domino termination "pcp.append_domino(pcp.domino, pcp.t)"
    "nil")))
 (append_domino_end_TCC1 0
  (append_domino_end_TCC1-1 nil 3827596370
   ("" (skeep) (("" (expand "append") (("" (propax) nil nil)) nil))
    nil)
   ((append def-decl "list[T]" list_props nil)) nil
   (append_domino_end subtype
    "list_props[Piece].append(pcp.dom1, pcp.dom2)"
    "(list_adt[Piece].cons?)")))
 (append_domino_end_TCC2 0
  (append_domino_end_TCC2-1 nil 3827596370
   ("" (skeep)
    (("" (rewrite "every_forall")
      (("" (skeep)
        (("" (split)
          (("1" (typepred "indices")
            (("1" (rewrite "every_forall")
              (("1" (inst -1 "n") (("1" (flatten) nil nil)) nil)) nil))
            nil)
           ("2" (typepred "indices")
            (("2" (rewrite "every_forall")
              (("2" (inst -1 "n") (("2" (flatten) nil nil)) nil)) nil))
            nil)
           ("3" (typepred "indices")
            (("3" (rewrite "every_forall")
              (("3" (inst -1 "n") (("3" (flatten) nil nil)) nil)) nil))
            nil)
           ("4" (typepred "indices")
            (("4" (rewrite "every_forall")
              (("4" (inst -1 "n") (("4" (flatten) nil nil)) nil)) nil))
            nil)
           ("5" (typepred "indices")
            (("5" (rewrite "every_forall")
              (("5" (inst -1 "n") (("5" (flatten) nil nil)) nil)) nil))
            nil)
           ("6" (typepred "indices")
            (("6" (rewrite "every_forall")
              (("6" (inst -1 "n")
                (("6" (flatten)
                  (("6" (hide-all-but (-6 1))
                    (("6" (rewrite "length_append")
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_forall formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (char type-eq-decl nil pcp nil) (Piece type-eq-decl nil pcp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (append def-decl "list[T]" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (append_domino_end subtype "pcp.indices"
    "list[below[length[Piece](append[Piece](dom1, dom2))]]")))
 (append_domino_end 0
  (append_domino_end-2 nil 3827495442
   ("" (measure-induct+ "length(indices)" ("dom1" "indices"))
    (("1" (skeep)
      (("1" (expand "append_domino" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (assert)
              (("1" (typepred "car(x!2)")
                (("1" (rewrite "nth_append")
                  (("1" (inst -2 "x!1" "cdr(x!2)")
                    (("1" (inst -2 "dom2")
                      (("1" (expand "length" -2 2)
                        (("1" (replace -2) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 2))
                    (("2" (typepred "x!2")
                      (("2" (rewrite "every_forall")
                        (("2" (rewrite "every_forall")
                          (("2" (skeep)
                            (("2" (inst?)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "length_append")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (typepred "y!2")
        (("2" (rewrite "every_forall")
          (("2" (rewrite "every_forall")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (rewrite "length_append")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (typepred "y!1")
      (("3" (hide-all-but (-1 1)) (("3" (grind) nil nil)) nil)) nil)
     ("4" (hide-all-but 1)
      (("4" (typepred "y!2")
        (("4" (skeep)
          (("4" (rewrite "every_forall")
            (("4" (rewrite "every_forall")
              (("4" (skeep)
                (("4" (inst?)
                  (("4" (flatten)
                    (("4" (assert)
                      (("4" (rewrite "length_append")
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (skeep)
        (("5" (typepred "y!1") (("5" (grind) nil nil)) nil)) nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skeep)
        (("6" (typepred "x!1`2")
          (("6" (rewrite "every_forall")
            (("6" (rewrite "every_forall")
              (("6" (skeep)
                (("6" (inst?)
                  (("6" (flatten)
                    (("6" (assert)
                      (("6" (rewrite "length_append")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide-all-but 1)
      (("7" (typepred "y!1`2")
        (("7" (rewrite "every_forall")
          (("7" (rewrite "every_forall")
            (("7" (skeep)
              (("7" (inst?)
                (("7" (flatten)
                  (("7" (assert)
                    (("7" (rewrite "length_append")
                      (("7" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (hide-all-but 1)
      (("8" (typepred "y!1`1") (("8" (grind) nil nil)) nil)) nil)
     ("9" (hide-all-but 1)
      (("9" (typepred "x!1`1") (("9" (grind) nil nil)) nil)) nil)
     ("10" (hide-all-but 2)
      (("10" (typepred "x!1`1") (("10" (grind) nil nil)) nil)) nil)
     ("11" (hide-all-but 1)
      (("11" (typepred "y!1`1") (("11" (grind) nil nil)) nil)) nil)
     ("12" (hide-all-but 1)
      (("12" (skeep)
        (("12" (typepred "y!1`2")
          (("12" (rewrite "every_forall")
            (("12" (rewrite "every_forall")
              (("12" (skeep)
                (("12" (inst?)
                  (("12" (flatten)
                    (("12" (assert)
                      (("12" (rewrite "length_append")
                        (("12" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide-all-but 1)
      (("13" (typepred "y!1`1") (("13" (grind) nil nil)) nil)) nil)
     ("14" (hide-all-but 1)
      (("14" (typepred "indices!1")
        (("14" (rewrite "every_forall")
          (("14" (rewrite "every_forall")
            (("14" (skeep)
              (("14" (inst?)
                (("14" (flatten)
                  (("14" (assert)
                    (("14" (rewrite "length_append")
                      (("14" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide-all-but 1) (("15" (grind) nil nil)) nil))
    nil)
   ((nth_append formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_append formula-decl nil list_props nil)
    (every_forall formula-decl nil more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append_domino def-decl "[list[(Alphabet)], list[(Alphabet)]]" pcp
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Piece type-eq-decl nil pcp nil) (char type-eq-decl nil pcp nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (append_domino_end-1 nil 3826905234
   (""
    (case " FORALL (dom1: list[Piece], dom2: (cons?[Piece])) :
              FORALL (indices: list[below[length(dom2)]]):
        append_domino(dom2, indices) =
         append_domino(append(dom1, dom2),
                       map(LAMBDA (n: nat): n + length(dom1))(indices))")
    (("1" (grind) nil nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (induct "indices")
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (expand "map" 1)
              (("2" (expand "append_domino" 1)
                (("2" (rewrite "nth_append")
                  (("2" (replace -1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (rewrite "every_forall")
                (("3" (skeep)
                  (("3" (prop)
                    (("1"
                      (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("2"
                      (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("3"
                      (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("4"
                      (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("5"
                      (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("6"
                      (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (typepred "indices")
                              (("1"
                                (rewrite "every_nth")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite "length_append")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "subtype_nth")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "n_1")
                                (("2"
                                  (case
                                   "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite
                                       "subtype_length[numfield,nat]")
                                      (("1"
                                        (rewrite "map_length")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (rewrite
                                       "subtype_map[nat,numfield,nat,nat]")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide 2)
            (("4" (typepred "dom1" "dom2")
              (("4" (grind)
                (("4" (expand "append")
                  (("4" (lift-if)
                    (("4" (prop) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (rewrite "every_forall")
          (("3" (skeep)
            (("3" (prop)
              (("1"
                (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("2"
                (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("3"
                (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("4"
                (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("5"
                (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("6"
                (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert)
                      (("1" (rewrite "map_nth_rw")
                        (("1" (typepred "indices")
                          (("1" (rewrite "every_forall")
                            (("1" (inst?)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-6 1))
                                  (("1"
                                    (rewrite "length_append")
                                    (("1"
                                      (rewrite "subtype_nth")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "n_1")
                            (("2"
                              (case "map[nat, numfield]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices) = map[nat, nat]
                                (LAMBDA (n: nat): n + length[Piece](dom1))
                                (indices)")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite
                                   "subtype_length[numfield,nat]")
                                  (("1"
                                    (rewrite "map_length")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (rewrite
                                   "subtype_map[nat,numfield,nat,nat]")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (expand "append")
          (("4" (lift-if) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((every_forall formula-decl nil more_list_props structures)
    (subtype_map formula-decl nil subtype_map nil)
    (subtype_nth formula-decl nil subtype_length nil)
    (subtype_length formula-decl nil subtype_length nil)
    (nth_append formula-decl nil more_list_props structures))
   shostak))
 (append_domino_begin_TCC1 0
  (append_domino_begin_TCC1-1 nil 3827596491
   ("" (skeep) (("" (expand "append") (("" (grind) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)) nil
   (append_domino_begin subtype
    "list_props[Piece].append(pcp.dom1, pcp.dom2)"
    "(list_adt[Piece].cons?)")))
 (append_domino_begin_TCC2 0
  (append_domino_begin_TCC2-1 nil 3827596491
   ("" (skeep)
    (("" (rewrite "every_forall")
      (("" (skeep)
        (("" (prop)
          (("1"
            (case "nth(map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n) =nth[nat](map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n)")
            (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)
           ("2"
            (case "nth(map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n) =nth[nat](map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n)")
            (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)
           ("3"
            (case "nth(map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n) =nth[nat](map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n)")
            (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)
           ("4"
            (case "nth(map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n) =nth[nat](map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n)")
            (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)
           ("5"
            (case "nth(map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n) =nth[nat](map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n)")
            (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)
           ("6"
            (case "nth(map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n) =nth[nat](map[nat, nat]
                                (LAMBDA (i: nat): i + length[Piece](dom1))
                                (indices),
                            n)")
            (("1" (replaces -1)
              (("1" (rewrite "map_nth_rw")
                (("1" (rewrite "length_append")
                  (("1" (typepred "indices")
                    (("1" (rewrite "every_forall")
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (assert)
                            (("1"
                              (case "nth(indices, n) = nth[nat](indices, n)")
                              (("1" (assert) nil nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "n")
                  (("2"
                    (case "length(map[nat, nat]
                  (LAMBDA (i: nat): i + length[Piece](dom1))(indices)) = length[nat](map[nat, nat]
                  (LAMBDA (i: nat): i + length[Piece](dom1))(indices))")
                    (("1" (replaces -1)
                      (("1" (rewrite "map_length") nil nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (every_forall formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (char type-eq-decl nil pcp nil) (Piece type-eq-decl nil pcp nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (append def-decl "list[T]" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (length_append formula-decl nil list_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (append_domino_begin subtype
    "list_adt_map[nat, nat].map(LAMBDA (i: naturalnumbers.nat): (number_fields.+)(list_props[Piece].length(pcp.dom1), i))(pcp.indices)"
    "list[below[length[Piece](append[Piece](dom1, dom2))]]")))
 (append_domino_begin 0
  (append_domino_begin-1 nil 3827596426
   (""
    (case " FORALL (dom1: list[Piece], dom2: (cons?[Piece])) :
                            FORALL (indices: list[below[length(dom2)]]):
                      append_domino(dom2, indices) =
                       append_domino(append(dom1, dom2),
                                     map(LAMBDA (n: nat): n + length(dom1))(indices))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "dom1")
          (("1" (inst?)
            (("1" (replaces -1)
              (("1"
                (case "map(LAMBDA (n: nat): n + length(dom1))(indices)= map[nat, nat]
                         (LAMBDA (i: nat): length(dom1) + i)(indices)")
                (("1" (replace -1) (("1" (propax) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat ]")
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (induct "indices")
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (expand "map" 1)
              (("2" (expand "append_domino" 1)
                (("2" (rewrite "nth_append")
                  (("2" (replace -1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (rewrite "every_forall")
                (("3" (skeep)
                  (("3" (prop)
                    (("1"
                      (case "map[nat, numfield]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices) = map[nat, nat]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("2"
                      (case "map[nat, numfield]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices) = map[nat, nat]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("3"
                      (case "map[nat, numfield]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices) = map[nat, nat]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("4"
                      (case "map[nat, numfield]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices) = map[nat, nat]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("5"
                      (case "map[nat, numfield]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices) = map[nat, nat]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil)
                     ("6"
                      (case "map[nat, numfield]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices) = map[nat, nat]
                                                          (LAMBDA (n: nat): n + length[Piece](dom1))
                                                          (indices)")
                      (("1" (replaces -1)
                        (("1" (rewrite "subtype_nth")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (typepred "indices")
                              (("1"
                                (rewrite "every_nth")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite "length_append")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "subtype_nth")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "n_1")
                                (("2"
                                  (case
                                   "map[nat, numfield]
                                                                  (LAMBDA (n: nat): n + length[Piece](dom1))
                                                                  (indices) = map[nat, nat]
                                                                  (LAMBDA (n: nat): n + length[Piece](dom1))
                                                                  (indices)")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite
                                       "subtype_length[numfield,nat]")
                                      (("1"
                                        (rewrite "map_length")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (rewrite
                                       "subtype_map[nat,numfield,nat,nat]")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (rewrite "subtype_map[nat,numfield,nat,nat]")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide 2)
            (("4" (typepred "dom1" "dom2")
              (("4" (grind)
                (("4" (expand "append")
                  (("4" (lift-if)
                    (("4" (prop) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (rewrite "every_forall")
          (("3" (skeep)
            (("3" (prop)
              (("1"
                (case "map[nat, numfield]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices) = map[nat, nat]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("2"
                (case "map[nat, numfield]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices) = map[nat, nat]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("3"
                (case "map[nat, numfield]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices) = map[nat, nat]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("4"
                (case "map[nat, numfield]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices) = map[nat, nat]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("5"
                (case "map[nat, numfield]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices) = map[nat, nat]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil)
               ("6"
                (case "map[nat, numfield]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices) = map[nat, nat]
                                                      (LAMBDA (n: nat): n + length[Piece](dom1))
                                                      (indices)")
                (("1" (replaces -1)
                  (("1" (rewrite "subtype_nth")
                    (("1" (assert)
                      (("1" (rewrite "map_nth_rw")
                        (("1" (typepred "indices")
                          (("1" (rewrite "every_forall")
                            (("1" (inst?)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-6 1))
                                  (("1"
                                    (rewrite "length_append")
                                    (("1"
                                      (rewrite "subtype_nth")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "n_1")
                            (("2"
                              (case "map[nat, numfield]
                                                              (LAMBDA (n: nat): n + length[Piece](dom1))
                                                              (indices) = map[nat, nat]
                                                              (LAMBDA (n: nat): n + length[Piece](dom1))
                                                              (indices)")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite
                                   "subtype_length[numfield,nat]")
                                  (("1"
                                    (rewrite "map_length")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (rewrite
                                   "subtype_map[nat,numfield,nat,nat]")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (rewrite "subtype_map[nat,numfield,nat,nat]")
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (expand "append")
          (("4" (lift-if) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (append_domino def-decl "[list[(Alphabet)], list[(Alphabet)]]" pcp
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Piece type-eq-decl nil pcp nil) (char type-eq-decl nil pcp nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (subtype_map formula-decl nil subtype_map nil)
    (TRUE const-decl "bool" booleans nil)
    (every_forall formula-decl nil more_list_props structures)
    (map_nth_rw formula-decl nil more_map_props nil)
    (subtype_nth formula-decl nil subtype_length nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every_nth formula-decl nil list_props nil)
    (length_append formula-decl nil list_props nil)
    (map_length formula-decl nil more_map_props nil)
    (subtype_length formula-decl nil subtype_length nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (dom2 skolem-const-decl "(cons?[Piece])" pcp nil)
    (dom1 skolem-const-decl "list[Piece]" pcp nil))
   nil))
 (append_domino_split_indices 0
  (append_domino_split_indices-1 nil 3827596952
   ("" (measure-induct+ "length(ind1)" ("domino" "ind1"))
    (("" (skeep)
      (("" (expand "append" 1 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2)
              (("1" (expand "append_domino" 1 (2 4))
                (("1" (assert)
                  (("1" (expand "append") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "append_domino" 2 1)
              (("2" (expand "append_domino" 2 (2 5))
                (("2" (assert)
                  (("2" (inst -1 "x!1" "cdr(x!2)")
                    (("2" (inst -1 "ind2")
                      (("2" (expand "length" -1 2)
                        (("2" (assert)
                          (("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (rewrite "append_assoc")
                                (("2"
                                  (rewrite "append_assoc")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_assoc formula-decl nil list_props nil)
    (nth def-decl "T" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (append_domino def-decl "[list[(Alphabet)], list[(Alphabet)]]" pcp
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Piece type-eq-decl nil pcp nil) (char type-eq-decl nil pcp nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (append_dom_without_first_TCC1 0
  (append_dom_without_first_TCC1-1 nil 3842796695
   ("" (skeep)
    (("" (typepred "indices")
      (("" (rewrite "every_forall")
        (("" (rewrite "every_forall")
          (("" (skeep)
            (("" (inst?)
              (("" (prop)
                (("" (expand "length" 1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Piece type-eq-decl nil pcp nil) (char type-eq-decl nil pcp nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (every_forall formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (append_dom_without_first subtype "pcp.indices"
    "list[below[length[Piece](cons[Piece](p1, dom))]]")))
 (append_dom_without_first 0
  (append_dom_without_first-1 nil 3842796842
   ("" (measure-induct+ "length(indices)" ("dom" "indices"))
    (("1" (skeep)
      (("1" (expand "member" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (expand "append_domino" 4)
              (("2" (assert)
                (("2" (prop)
                  (("1" (expand "nth" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (assert)
                          (("1" (hide-all-but (-1 3))
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (inst -1 "x!1" "cdr(x!2)")
                          (("2" (inst?)
                            (("2" (expand "length" -1 2)
                              (("2"
                                (inst -1 "p2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "x!1" "cdr(x!2)")
                    (("2" (expand "length" -1 2)
                      (("2" (inst?)
                        (("2" (inst -1 "p2")
                          (("2" (assert)
                            (("2" (expand "nth")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "y!2")
      (("2" (hide-all-but (-1 2))
        (("2" (rewrite "every_forall")
          (("2" (rewrite "every_forall")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (prop)
                  (("2" (expand "length" 1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (typepred "y!2")
        (("3" (hide-all-but (-1 2))
          (("3" (rewrite "every_forall")
            (("3" (rewrite "every_forall")
              (("3" (skeep)
                (("3" (inst?)
                  (("3" (prop)
                    (("3" (expand "length" 1) (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (typepred "x!1`2")
        (("4" (hide-all-but (-1 2))
          (("4" (rewrite "every_forall")
            (("4" (rewrite "every_forall")
              (("4" (skeep)
                (("4" (inst?)
                  (("4" (prop)
                    (("4" (expand "length" 1) (("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (typepred "x!1`2")
      (("5" (hide-all-but (-1 3))
        (("5" (skeep)
          (("5" (hide 1)
            (("5" (rewrite "every_forall")
              (("5" (rewrite "every_forall")
                (("5" (skeep)
                  (("5" (inst?)
                    (("5" (prop)
                      (("5" (expand "length" 1)
                        (("5" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (typepred "y!1`2")
        (("6" (hide-all-but (-1 2))
          (("6" (rewrite "every_forall")
            (("6" (rewrite "every_forall")
              (("6" (skeep)
                (("6" (inst?)
                  (("6" (prop)
                    (("6" (expand "length" 1) (("6" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (typepred "indices!1")
      (("7" (hide-all-but (-1 2))
        (("7" (rewrite "every_forall")
          (("7" (rewrite "every_forall")
            (("7" (skeep)
              (("7" (inst?)
                (("7" (prop)
                  (("7" (expand "length" 1) (("7" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_forall formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (append_domino def-decl "[list[(Alphabet)], list[(Alphabet)]]" pcp
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Piece type-eq-decl nil pcp nil) (char type-eq-decl nil pcp nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (domino_solution?_TCC1 0
  (domino_solution?_TCC3-1 nil 3840790978
   ("" (skeep)
    (("" (replace -1)
      (("" (replace -2)
        (("" (typepred "domino" "indices")
          (("" (expand "valid_domino?")
            (("" (prop)
              (("" (inst -2 "car(indices)")
                (("" (prop)
                  (("1" (expand "append_domino" 1)
                    (("1" (expand "append" 1) (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (replaces -7)
                    (("2" (expand "append_domino" 1)
                      (("2" (expand "append" 1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (valid_domino? const-decl "bool" pcp nil)
    (Piece type-eq-decl nil pcp nil) (char type-eq-decl nil pcp nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (append def-decl "list[T]" list_props nil)
    (append_domino def-decl "[list[(Alphabet)], list[(Alphabet)]]" pcp
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil
   (domino_solution? subtype "pcp.wu"
    "(list_adt[(pcp.Alphabet)].cons?)")))
 (domino_solution?_TCC2 0
  (domino_solution?_TCC4-1 nil 3840790978
   ("" (lemma "domino_solution?_TCC1")
    (("" (skeep)
      (("" (inst?)
        (("" (inst?)
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (valid_domino? const-decl "bool" pcp nil)
    (Piece type-eq-decl nil pcp nil) (char type-eq-decl nil pcp nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]" pcp nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil pcp nil)
    (domino_solution?_TCC1 subtype-tcc nil pcp nil))
   nil
   (domino_solution? subtype "pcp.wu"
    "{l: list_adt[(pcp.Alphabet)].list | (booleans.NOT)(list_adt[(pcp.Alphabet)].null?(l))}"))))

