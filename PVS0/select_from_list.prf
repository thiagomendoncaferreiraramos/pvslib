(select_from_list
 (search_TCC1 0
  (search_TCC1-1 nil 3824588116 ("" (subtype-tcc) nil nil) nil nil
   (search subtype "select_from_list.l"
     "(list_adt[select_from_list.T].cons?)")))
 (search_TCC2 0
  (search_TCC2-1 nil 3824588116 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (search termination
           "select_from_list.search(select_from_list.i, list_adt[select_from_list.T].cdr(select_from_list.l))"
     "nil")))
 (select_from_list_TCC1 0
  (select_from_list_TCC1-1 nil 3824588116
   ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (select_from_list termination
    "select_from_list.select_from_list(select_from_list.t, select_from_list.l2)"
    "nil")))
 (nth_search_TCC1 0
  (nth_search_TCC1-1 nil 3824588116 ("" (subtype-tcc) nil nil) nil nil
   (nth_search subtype
    "select_from_list.search(select_from_list.i, select_from_list.l)"
    "below[length[T](l)]")))
 (nth_search 0
  (nth_search-1 nil 3824588135
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (expand "search" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (typepred "i")
              (("1" (hide -3 1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide -2) (("2" (grind) nil nil)) nil)
             ("3" (expand "nth" 2)
              (("3" (assert)
                (("3" (lift-if)
                  (("3" (assert)
                    (("3" (inst -1 "cdr(x!1)")
                      (("3" (inst -1 "i")
                        (("1" (expand "length" -1 2)
                          (("1" (propax) nil nil)) nil)
                         ("2" (typepred "i") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (search def-decl "nat" select_from_list nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil select_from_list nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (search_in_Alphabet 0
  (search_in_Alphabet-1 nil 3824589089
   ("" (measure-induct+ "length(set2list[T](Alphabet))" "Alphabet")
    (("" (skeep)
      (("" (expand "set2list" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2 1)
              (("1" (typepred "a") (("1" (grind) nil nil)) nil)) nil)
             ("2" (expand "search" 2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "length" 1) (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "length" 2)
                    (("2" (inst -1 "rest(x!1)")
                      (("2" (inst -1 "a")
                        (("1" (expand "set2list" -1 2)
                          (("1" (assert)
                            (("1" (expand "length" 4 2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest const-decl "set" sets nil) (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (search def-decl "nat" select_from_list nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil select_from_list nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (search_in 0
  (search_in-1 nil 3825172207
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (expand "search" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (hide -) (("2" (grind) nil nil)) nil)
             ("3" (inst -1 "cdr(x!1)")
              (("3" (inst -1 "x")
                (("3" (expand "length" -1 2)
                  (("3" (assert)
                    (("3" (expand "length" 2)
                      (("3" (assert)
                        (("3" (expand "member" -1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-nonempty-type-decl nil select_from_list nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (search def-decl "nat" select_from_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   shostak))
 (select_from_list_proj 0
  (select_from_list_proj-1 nil 3825169656
   ("" (measure-induct+ "length(l1)" "l1")
    (("" (skeep*)
      (("" (expand "select_from_list" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (typepred "i")
              (("1" (hide -3 -4 1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (expand "nth" 2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (inst -3 "0")
                    (("1" (expand "nth" -3)
                      (("1" (rewrite "search_in") nil nil)) nil)
                     ("2" (hide-all-but (1 3)) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (inst -1 "cdr(x!1)")
                    (("2" (inst -1 "l2" "i-1")
                      (("1" (expand "length" -1 2)
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (inst -1 "j+1")
                              (("1"
                                (expand "nth" -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (typepred "j")
                                (("2"
                                  (hide-all-but (-1 1 4))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-nonempty-type-decl nil select_from_list nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (select_from_list def-decl "list[nat]" select_from_list nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (search_in formula-decl nil select_from_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (occurrences_TCC1 0
  (occurrences_TCC1-1 nil 3838899511 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (occurrences termination
    "select_from_list.occurrences(select_from_list.m)(list_adt[select_from_list.T].cdr(select_from_list.l))"
    "nil")))
 (occurrences_append 0
  (occurrences_append-1 nil 3838899518
   ("" (induct "l1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil select_from_list nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (occurrences def-decl "nat" select_from_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (occurrences_predicate 0
  (occurrences_predicate-1 nil 3838901812
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "occurrences" 2)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (inst -3 "0")
              (("1" (expand "nth" -3) (("1" (assert) nil nil)) nil)
               ("2" (expand "length" 1) (("2" (assert) nil nil)) nil))
              nil)
             ("2" (inst -1 "a" "P")
              (("2" (assert)
                (("2" (skeep)
                  (("2" (inst -1 "i+1")
                    (("1" (expand "nth" -1) (("1" (propax) nil nil))
                      nil)
                     ("2" (typepred "i")
                      (("2" (expand "length" 1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below[length(cons2_var)]" select_from_list
       nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons2_var skolem-const-decl "list[T]" select_from_list nil)
    (cons1_var skolem-const-decl "T" select_from_list nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil select_from_list nil)
    (occurrences def-decl "nat" select_from_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

