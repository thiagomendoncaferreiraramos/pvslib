pvs0_props[Val:TYPE+] : THEORY
BEGIN

 IMPORTING structures@set_as_list, 
	   structures@set_as_list_props,
	   pvs0_cc[Val], 
	   structures@more_list_props[nat], 
	   structures@more_list_props[PVS0Bool[Val]]

  pvs0 : VAR PVS0

  subterm_transitive : LEMMA  FORALL (exa,exb,exc : PVS0Expr) : 
    subterm(exa,exb) AND subterm(exb,exc) IMPLIES subterm(exa,exc)

  null_path: LEMMA
    FORALL (expr: PVS0Expr): valid_path(expr)(null)

  valid_paths_subexpr : LEMMA
    FORALL (expr : PVS0Expr, path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    FORALL (path2 :  (valid_path(sterm))) : 
      valid_path(expr)(append(path2, path) )

  subterm_append: LEMMA 
    FORALL (expr : PVS0Expr, path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    FORALL (path2: (valid_path(sterm))):
      subterm_at(expr, append(path2,path)) = subterm_at(sterm, path2)

  valid_0_path_ext: LEMMA
    FORALL (expr : PVS0Expr, path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    (op1?(sterm) OR op2?(sterm) OR rec?(sterm) OR ite?(sterm))
    IMPLIES valid_path(expr)(cons(0,path))
  
  valid_1_path_ext: LEMMA
    FORALL (expr : PVS0Expr, path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    (op2?(sterm) OR ite?(sterm))
    IMPLIES valid_path(expr)(cons(1,path))
  
  valid_2_path_ext: LEMMA
    FORALL (expr : PVS0Expr, path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    ite?(sterm)
    IMPLIES valid_path(expr)(cons(2,path))

  app_prefix_of_path_ext: LEMMA
    FORALL (expr : PVS0Expr, path : (valid_path(expr)),
            path_ext : (valid_path(expr)) | suffix?(path,path_ext) ):
    LET sterm = subterm_at(expr, path) IN 
      EXISTS (p: (valid_path(sterm))): append(p, path) = path_ext

  cnst_vr_path_ext: LEMMA  
    FORALL (expr : PVS0Expr, path_ext,path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    (cnst?(sterm) OR vr?(sterm)) AND 
    suffix?(path, path_ext)
    IMPLIES path=path_ext
  
  op1_rec_path_ext: LEMMA
    FORALL (expr : PVS0Expr, path_ext,path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    (op1?(sterm) OR rec?(sterm)) AND 
    suffix?[nat](path, path_ext) AND
    path /= path_ext
    IMPLIES suffix?[nat](cons(0, path), path_ext)
  
  op2_path_ext: LEMMA
    FORALL (expr : PVS0Expr, path_ext,path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    op2?(sterm) AND 
    suffix?(path, path_ext) AND
    path /= path_ext
    IMPLIES suffix?(cons(0, path), path_ext) OR suffix?(cons(1, path), path_ext)
 
  ite_path_ext: LEMMA
    FORALL (expr : PVS0Expr, path_ext,path : (valid_path(expr))):
    LET sterm = subterm_at(expr, path) IN
    ite?(sterm) AND 
    suffix?(path, path_ext) AND
    path /= path_ext
    IMPLIES suffix?(cons(0, path), path_ext) OR
    suffix?(cons(1, path), path_ext) OR suffix?(cons(2, path), path_ext)

  valid_paths(expr: PVS0Expr): RECURSIVE { res: list[(valid_path(expr))] | 
    		    FORALL (p:(valid_path(expr))): member(p, res) }
    = 
      CASES expr OF
        op1(op,a)   : cons(null, map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))(valid_paths(a)) ),
        op2(op,a,b) : cons(null, append[list[nat]]( map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))
		     				      (valid_paths(a)) 
        	 	               	          , map(LAMBDA(l:list[nat]): append[nat](l, (: 1 :)))
                                                      (valid_paths(b)) ) ),
        rec(a)     : cons(null, map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))(valid_paths(a)) ),
        ite(a,b,c) : cons(null, append[list[nat]]( append[list[nat]]( map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))(valid_paths(a)) 
        		   	         , map(LAMBDA(l:list[nat]): append[nat](l, (: 1 :)))(valid_paths(b)) )
  			 , map(LAMBDA(l:list[nat]): append[nat](l, (: 2 :)))(valid_paths(c)) ) ),
        vr : (: null :), cnst(v): (: null :)
      ENDCASES 
    MEASURE expr By <<

  subset_member_sl: LEMMA
    FORALL (l1, l2 :Conditions):
    subset_sl?(l1,l2) <=>
    (FORALL (e :PVS0Bool): member(e,l1) => member(e,l2))

  suffix_subset_sl: LEMMA
    FORALL (l1, l2: Conditions):
    suffix?(l1,l2) => subset_sl?(l1,l2)

% Auxiliary function used only to simplify next lemma.
  path_conds_aux((n : posnat | n<=2 ), (expr: PVS0Expr | ite?(expr))) : PVS0Bool =
    IF n=1 
    THEN pvs0bool(get_cond(expr))
    ELSE pvs0not(get_cond(expr))
    ENDIF

% Invariance of conditions in a path when a new ite condition is added
  path_conditions_cons: LEMMA
    FORALL (expr: PVS0Expr)(path: (valid_path(expr)))(n: nat):
    LET sub_expr = subterm_at(expr, path) IN
    ite?(sub_expr) AND (n>=1 AND n<=2)
    IMPLIES
      path_conditions(expr, cons(n, path)) 
      = cons(path_conds_aux(n,sub_expr),path_conditions(expr, path))

  path_conditions_unmodified: LEMMA
    FORALL (expr: PVS0Expr)(path: (valid_path(expr)))(n: nat):
    LET sub_expr = subterm_at(expr, path) IN
    (NOT vr?(sub_expr) AND NOT cnst?(sub_expr) AND n=0)
    IMPLIES
    path_conditions(expr, cons(n, path)) 
    = path_conditions(expr, path)

  path_conditions_unmodified2: LEMMA
    FORALL (expr: PVS0Expr)(path: (valid_path(expr)))(n: nat):
    LET sub_expr = subterm_at(expr, path) IN
    (op2?(sub_expr) AND n=1)
    IMPLIES
    path_conditions(expr, cons(n, path)) 
    = path_conditions(expr, path)
  
% Conditions over a path are preserved.
  suffix_path_cnds_suffix : LEMMA
    FORALL (expr: PVS0Expr)(path,path_ext: (valid_path(expr))):
    suffix?(path, path_ext) IMPLIES
    suffix?(path_conditions(expr, path), path_conditions(expr, path_ext))

% Conditions over a path are preserved in conditions of extensions of the path.
  suffix_path_cnds : LEMMA
    FORALL (expr: PVS0Expr)(path,path_ext: (valid_path(expr))):
    suffix?(path, path_ext) IMPLIES
    subset_sl?(path_conditions(expr, path), path_conditions(expr, path_ext))

  condition_is_subterm: LEMMA
    FORALL (expr: PVS0Expr, path: (valid_path(expr)), e: PVS0Bool): 
      member(e,path_conditions(expr,path)) IMPLIES 
      EXISTS(path_: (valid_path(expr))): subterm_at(expr,path_)=get_expr(e) 
    
  condition_is_subterm_append: LEMMA
    FORALL (expr: PVS0Expr, path: (valid_path(expr)), cnds_pref, cnds_suff: Conditions):
      append(cnds_pref,cnds_suff) = path_conditions(expr,path) IMPLIES
      EXISTS(path_: (valid_path(expr))): path_conditions(expr,path_)=cnds_suff

  path_of_path_conditions: LEMMA
    FORALL (expr: PVS0Expr, path: (valid_path(expr)), cnds_pref, cnds_suff: Conditions): 
      path_conditions(expr,path) = append(cnds_pref,cnds_suff) AND
      cons?(cnds_suff)  IMPLIES
      EXISTS(path_: (valid_path(expr))): 
        subterm_at(expr,path_) = get_expr(car(cnds_suff)) AND
      	path_conditions(expr, path_) = cdr(cnds_suff) 

% True chains of conditions have conditions that are true.
  member_conds_rec: LEMMA
    FORALL (env:Val)(cnds: Conditions, e: PVS0Bool):
    member(e, cnds) AND
    eval_conds(pvs0)(cnds, env)
    IMPLIES eval_conds(pvs0)((: e :), env)

% All conditions in a chain are true implies the whole chain is true.
  member_conds_rec2: LEMMA
    FORALL (env:Val)(cnds: Conditions):
    (FORALL (e: PVS0Bool| member(e, cnds)):
    eval_conds(pvs0)( (: e :), env))
    IMPLIES eval_conds(pvs0)(cnds, env)
 
  eval_conds_reverse: LEMMA
    FORALL (pvs0: PVS0, cnds: Conditions, env: Val): 
    eval_conds(pvs0)(cnds, env) = eval_conds(pvs0)(reverse(cnds), env)

% Subsequences of true chains of conditions are also true.
  suffix_conds_rec : COROLLARY
    FORALL (env:Val)(suffcnds, cnds: Conditions):
    subset_sl?(suffcnds, cnds) AND
    eval_conds(pvs0)(cnds, env)
    IMPLIES eval_conds(pvs0)(suffcnds, env)

% True chains of conditions over and extended path of the subterm
% of an expression implies the chain of conditions over the path is also true.
  suffix_conds_valid_sub : COROLLARY
    FORALL (env:Val)(pvs0: PVS0)(sub_expr: PVS0Expr | subterm(sub_expr,get_body(pvs0)))
          (path,path_ext: (valid_path(sub_expr))):
    eval_conds(pvs0)(path_conditions(sub_expr, path_ext),env) AND
    suffix?(path, path_ext) 
    IMPLIES eval_conds(pvs0)(path_conditions(sub_expr, path),env)

% The same than the previous Corollary, but considering the whole expression af
% subterm of itself.
  suffix_conds_valid : COROLLARY
    FORALL (env:Val)(pvs0: PVS0)(path,path_ext: (valid_path(get_body(pvs0)))):
    eval_conds(pvs0)(path_conditions(get_body(pvs0), path_ext),env) AND
    suffix?(path, path_ext) 
    IMPLIES eval_conds(pvs0)(path_conditions(get_body(pvs0), path),env)

  rec_decreasing : LEMMA
    FORALL (env:Val)(n:posnat)(expr:PVS0Expr)(pvs0)
           (path,path_ext:(valid_path(get_body(pvs0)))):
    LET body = get_body(pvs0),
        conds = path_conditions(body, path_ext),
        subexpr = subterm_at(body, path_ext) IN
    expr  = subterm_at(body,path) AND
    some?(eval_expr(pvs0)(n,expr,env)) AND
    suffix?(path, path_ext) AND
    eval_conds(pvs0)(conds,env) AND
    rec?(subexpr) 
    IMPLIES LET valarg = eval_expr(pvs0)(n,get_arg(subexpr),env) IN
    	  some?(valarg) AND 
  	  some?(eval_expr(pvs0)(n-1,body,val(valarg)))

  rec_mu_decreasing : LEMMA
    FORALL (env:Val)(n: posnat)
           (pvs0:(terminating?))
  	   (path_ext: (valid_path(get_body(pvs0)))):
    LET body    = get_body(pvs0),
        conds   = path_conditions(body, path_ext),
        subexpr = subterm_at(body, path_ext) IN
    mu(pvs0)(env) = n AND
    eval_conds(pvs0)(conds,env) AND
    rec?(subexpr) 
    IMPLIES FORALL (vact: Val):
          semantic_rel_expr(pvs0)(get_arg(subexpr),env,vact) 
	  IMPLIES mu(pvs0)(vact) < n 

  decreasing_rec : LEMMA
    FORALL (pvs0)(n:posnat,expr:PVS0Expr)(path:(valid_path(get_body(pvs0))))(env:Val) :
      LET body = get_body(pvs0) IN
      expr = subterm_at(body,path) IMPLIES
      (FORALL (path_ext: (valid_path(body))):
        LET conds   = path_conditions(body, path_ext),
            subexpr = subterm_at(body, path_ext) IN
        suffix?(path, path_ext) AND
        eval_conds(pvs0)(conds,env) AND
        (NOT rec?(subexpr) IMPLIES 
	    some?(eval_expr(pvs0)(n,subexpr,env))) AND
        (rec?(subexpr) IMPLIES 
            LET vact = eval_expr(pvs0)(n,get_arg(subexpr),env) IN
	    some?(vact) AND
	    some?(eval_expr(pvs0)(n-1,body, val(vact)))))
        IMPLIES 
      some?(eval_expr(pvs0)(n,expr,env))
  
END pvs0_props
