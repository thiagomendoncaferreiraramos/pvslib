(string_rewriting
 (IMP_select_from_list_TCC1 0
  (IMP_select_from_list_TCC1-1 nil 3883217046
   ("" (typepred "Alphabet") (("" (grind) nil nil)) nil)
   ((injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (letter type-eq-decl nil string_rewriting nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil))
   nil (IMP_select_from_list existence "" "letter")))
 (append_from_rr1_TCC1 0
  (append_from_rr1_TCC1-1 nil 3849729901 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil)
    (string type-eq-decl nil string_rewriting nil)
    (rewriting_rule type-eq-decl nil string_rewriting nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list_rewriting_rules type-eq-decl nil string_rewriting nil)
    (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (append_from_rr1 termination
    "string_rewriting.append_from_rr1(string_rewriting.r, string_rewriting.t)"
    "nil")))
 (append_from_rr1_append_TCC1 0
  (append_from_rr1_append_TCC1-1 nil 3849733495
   ("" (skeep)
    (("" (rewrite "every_forall")
      (("" (skeep)
        (("" (typepred "ind")
          (("" (rewrite "every_forall")
            (("" (inst -1 "n")
              (("" (prop)
                (("" (rewrite "length_append") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_forall formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil)
    (string type-eq-decl nil string_rewriting nil)
    (rewriting_rule type-eq-decl nil string_rewriting nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list_rewriting_rules type-eq-decl nil string_rewriting nil)
    (below type-eq-decl nil nat_types nil)
    (append def-decl "list[T]" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (append_from_rr1_append subtype "string_rewriting.ind"
    "list[below[length[rewriting_rule](append[rewriting_rule](A, B))]]")))
 (append_from_rr1_append 0
  (append_from_rr1_append-1 nil 3849785534
   ("" (measure-induct+ "length(ind)" ("A" "ind"))
    (("1" (skeep)
      (("1" (case "null?(x!2)")
        (("1" (hide -2) (("1" (grind) nil nil)) nil)
         ("2" (typepred "x!2")
          (("2" (rewrite "every_forall")
            (("2" (case "null?(x!1)")
              (("1" (expand "append" 2)
                (("1" (assert)
                  (("1" (expand "append_from_rr1" 2 2)
                    (("1" (inst -2 "0")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand " append_from_rr1" 3 2)
                (("2" (assert)
                  (("2" (expand "append_from_rr1" 3 1)
                    (("2" (rewrite "nth_append")
                      (("2" (inst -2 "x!1" "cdr(x!2)")
                        (("2" (inst -2 "B")
                          (("2" (expand "length" -2 2)
                            (("2" (replaces -2) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (typepred "y!2")
        (("2" (rewrite "every_forall")
          (("2" (rewrite "every_forall")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (prop)
                  (("2" (rewrite "length_append")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep)
        (("3" (typepred "y!2")
          (("3" (rewrite "every_forall")
            (("3" (rewrite "every_forall")
              (("3" (skeep)
                (("3" (inst?)
                  (("3" (prop)
                    (("3" (rewrite "length_append")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (skeep)
        (("4" (typepred "x!1`2")
          (("4" (rewrite "every_forall")
            (("4" (rewrite "every_forall")
              (("4" (skeep)
                (("4" (inst?)
                  (("4" (prop)
                    (("4" (rewrite "length_append")
                      (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (typepred "y!1`2")
        (("5" (rewrite "every_forall")
          (("5" (rewrite "every_forall")
            (("5" (skeep)
              (("5" (inst?)
                (("5" (prop)
                  (("5" (rewrite "length_append")
                    (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skeep)
        (("6" (typepred "y!1`2")
          (("6" (rewrite "every_forall")
            (("6" (rewrite "every_forall")
              (("6" (skeep)
                (("6" (inst?)
                  (("6" (prop)
                    (("6" (rewrite "length_append")
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (typepred "ind!1")
        (("7" (rewrite "every_forall")
          (("7" (rewrite "every_forall")
            (("7" (skeep)
              (("7" (inst?)
                (("7" (prop)
                  (("7" (rewrite "length_append")
                    (("7" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (every_forall formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_from_rr2_append 0
  (append_from_rr2_append-1 nil 3849815413
   ("" (measure-induct+ "length(ind)" ("A" "ind"))
    (("1" (skeep)
      (("1" (case "null?(x!2)")
        (("1" (hide -2) (("1" (grind) nil nil)) nil)
         ("2" (typepred "x!2")
          (("2" (rewrite "every_forall")
            (("2" (case "null?(x!1)")
              (("1" (expand "append" 2)
                (("1" (assert)
                  (("1" (expand "append_from_rr2" 2 2)
                    (("1" (inst -2 "0")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand " append_from_rr2" 3 2)
                (("2" (assert)
                  (("2" (expand "append_from_rr2" 3 1)
                    (("2" (rewrite "nth_append")
                      (("2" (inst -2 "x!1" "cdr(x!2)")
                        (("2" (inst -2 "B")
                          (("2" (expand "length" -2 2)
                            (("2" (replaces -2) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (typepred "y!2")
        (("2" (rewrite "every_forall")
          (("2" (rewrite "every_forall")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (prop)
                  (("2" (rewrite "length_append")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (typepred "y!2")
        (("3" (skeep)
          (("3" (rewrite "every_forall")
            (("3" (rewrite "every_forall")
              (("3" (skeep)
                (("3" (inst?)
                  (("3" (prop)
                    (("3" (rewrite "length_append")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (skeep)
        (("4" (typepred "x!1`2")
          (("4" (rewrite "every_forall")
            (("4" (rewrite "every_forall")
              (("4" (skeep)
                (("4" (inst?)
                  (("4" (prop)
                    (("4" (rewrite "length_append")
                      (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (typepred "y!1`2")
        (("5" (rewrite "every_forall")
          (("5" (rewrite "every_forall")
            (("5" (skeep)
              (("5" (inst?)
                (("5" (prop)
                  (("5" (rewrite "length_append")
                    (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skeep)
        (("6" (typepred "y!1`2")
          (("6" (rewrite "every_forall")
            (("6" (rewrite "every_forall")
              (("6" (skeep)
                (("6" (inst?)
                  (("6" (prop)
                    (("6" (rewrite "length_append")
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (typepred "ind!1")
        (("7" (rewrite "every_forall")
          (("7" (rewrite "every_forall")
            (("7" (skeep)
              (("7" (inst?)
                (("7" (prop)
                  (("7" (rewrite "length_append")
                    (("7" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (every_forall formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_from_rr1_append2_TCC1 0
  (append_from_rr1_append2_TCC1-1 nil 3849816576
   ("" (skeep)
    (("" (skeep)
      (("" (rewrite "length_append") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rewriting_rule type-eq-decl nil string_rewriting nil)
    (string type-eq-decl nil string_rewriting nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (list_rewriting_rules type-eq-decl nil string_rewriting nil)
    (length_append formula-decl nil list_props nil))
   nil
   (append_from_rr1_append2 subtype
    "restrict[nat, below[length[rewriting_rule](B)], numfield].restrict(LAMBDA (i: naturalnumbers.nat): (number_fields.+)(i, list_props[rewriting_rule].length(string_rewriting.A)))"
    "[below[length[rewriting_rule](B)] -> below[length[rewriting_rule](append[rewriting_rule](A, B))]]")))
 (append_from_rr1_append2 0
  (append_from_rr1_append2-1 nil 3849817019
   ("" (measure-induct+ "length(ind)" ("B" "ind"))
    (("1" (skeep)
      (("1" (expand "append_from_rr1" 1 2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (grind) nil nil)
             ("2" (expand "append_from_rr1" 2 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "map" 2)
                    (("2" (assert)
                      (("2" (expand "restrict")
                        (("2" (rewrite "nth_append")
                          (("2" (inst -1 "x!1" "cdr(x!2)")
                            (("2" (inst -1 "A")
                              (("2"
                                (expand "length" -1 2)
                                (("2" (replaces -1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skeep)
        (("2" (rewrite "length_append")
          (("2" (typepred "x1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (typepred "x1")
            (("3" (rewrite "length_append") (("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (skeep*)
        (("4" (typepred "x1")
          (("4" (rewrite "length_append") (("4" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (skeep)
        (("5" (typepred "x1")
          (("5" (rewrite "length_append") (("5" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skeep*)
        (("6" (typepred "x1")
          (("6" (rewrite "length_append") (("6" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep)
        (("7" (typepred "x1")
          (("7" (rewrite "length_append") (("7" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_from_rr2_append2 0
  (append_from_rr2_append2-1 nil 3849818451
   ("" (measure-induct+ "length(ind)" ("B" "ind"))
    (("1" (skeep)
      (("1" (expand "append_from_rr2" 1 2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (grind) nil nil)
             ("2" (expand "append_from_rr2" 2 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "map" 2)
                    (("2" (assert)
                      (("2" (expand "restrict")
                        (("2" (rewrite "nth_append")
                          (("2" (inst -1 "x!1" "cdr(x!2)")
                            (("2" (inst -1 "A")
                              (("2"
                                (expand "length" -1 2)
                                (("2" (replaces -1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skeep)
        (("2" (rewrite "length_append")
          (("2" (typepred "x1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (typepred "x1")
            (("3" (rewrite "length_append") (("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (skeep*)
        (("4" (typepred "x1")
          (("4" (rewrite "length_append") (("4" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (skeep)
        (("5" (typepred "x1")
          (("5" (rewrite "length_append") (("5" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (skeep*)
        (("6" (typepred "x1")
          (("6" (rewrite "length_append") (("6" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep)
        (("7" (typepred "x1")
          (("7" (rewrite "length_append") (("7" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_from_rr1_split 0
  (append_from_rr1_split-1 nil 3849819390
   ("" (measure-induct+ "length(ind1)" ("r" "ind1"))
    (("" (skeep)
      (("" (expand "append" 1 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "append_from_rr1" 1 2)
              (("1" (assert)
                (("1" (expand "append" 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "append_from_rr1" 2 (1 2))
              (("2" (assert)
                (("2" (rewrite "append_assoc")
                  (("2" (inst -1 "x!1" "cdr(x!2)")
                    (("2" (inst -1 "ind2")
                      (("2" (expand "length" -1 2)
                        (("2" (replace -1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_from_rr2_split 0
  (append_from_rr2_split-1 nil 3849820286
   ("" (measure-induct+ "length(ind1)" ("r" "ind1"))
    (("" (skeep)
      (("" (expand "append" 1 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "append_from_rr2" 1 2)
              (("1" (assert)
                (("1" (expand "append" 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "append_from_rr2" 2 (1 2))
              (("2" (assert)
                (("2" (rewrite "append_assoc")
                  (("2" (inst -1 "x!1" "cdr(x!2)")
                    (("2" (inst -1 "ind2")
                      (("2" (expand "length" -1 2)
                        (("2" (replace -1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (ind_rr_conv_TCC1 0
  (ind_rr_conv_TCC1-1 nil 3856281472
   ("" (skeep)
    (("" (typepred "ind") (("" (assert) (("" (postpone) nil nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (ind_rr_conv subtype
    "(number_fields.+)(string_rewriting.ind, string_rewriting.len)"
    "below[len + len + len2]")))
 (ind_rr_conv_TCC2 0
  (ind_rr_conv_TCC2-1 nil 3856281472 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (ind_rr_conv subtype
    "(number_fields.-)(string_rewriting.ind, string_rewriting.len)"
    "below[len + len + len2]")))
 (ind_rr_conv_identity 0
  (ind_rr_conv_identity-1 nil 3856346739
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "o ")
        (("" (expand "ind_rr_conv" 1 2)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "ind_rr_conv") (("1" (assert) nil nil))
                nil)
               ("2" (expand "ind_rr_conv") (("2" (assert) nil nil))
                nil)
               ("3" (expand "ind_rr_conv") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (append_from_rr12rr2_TCC1 0
  (append_from_rr12rr2_TCC1-1 nil 3856281472
   ("" (skeep)
    (("" (rewrite "every_forall")
      (("" (typepred "ind")
        (("" (rewrite "every_forall")
          (("" (skeep)
            (("" (inst?)
              (("" (prop)
                (("" (rewrite "length_append")
                  (("" (rewrite "length_append")
                    (("" (expand "r_conv" -6)
                      (("" (rewrite "map_length")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (every_forall formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil)
    (string type-eq-decl nil string_rewriting nil)
    (rewriting_rule type-eq-decl nil string_rewriting nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (list_rewriting_rules type-eq-decl nil string_rewriting nil)
    (r_conv const-decl "list_rewriting_rules" string_rewriting nil)
    (Alpha2lrr const-decl "list_rewriting_rules" string_rewriting nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (exchange const-decl "rewriting_rule" string_rewriting nil))
   nil
   (append_from_rr12rr2 subtype "string_rewriting.ind"
    "list[below[2 * length[rewriting_rule](r) + length[rewriting_rule](Alpha2lrr)]]")))
 (append_from_rr12rr2_TCC2 0
  (append_from_rr12rr2_TCC2-1 nil 3856281472
   ("" (skeep)
    ((""
      (typepred "map[below[2 * length(r) + length(Alpha2lrr)],
                 below[2 * length(r) + length(Alpha2lrr)]]
                 (ind_rr_conv(length[rewriting_rule](r),
                              length[rewriting_rule](Alpha2lrr)))
                 (ind)")
      (("" (rewrite "every_forall")
        (("" (rewrite "every_forall")
          (("" (skeep)
            (("" (inst?)
              (("" (prop)
                (("" (rewrite "length_append")
                  (("" (rewrite "length_append")
                    (("" (expand "r_conv")
                      (("" (rewrite "map_length")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((r_conv const-decl "list_rewriting_rules" string_rewriting nil)
    (append def-decl "list[T]" list_props nil)
    (ind_rr_conv const-decl "below[len + len + len2]" string_rewriting
     nil)
    nil (below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Alpha2lrr const-decl "list_rewriting_rules" string_rewriting nil)
    (list_rewriting_rules type-eq-decl nil string_rewriting nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rewriting_rule type-eq-decl nil string_rewriting nil)
    (string type-eq-decl nil string_rewriting nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (exchange const-decl "rewriting_rule" string_rewriting nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (every_forall formula-decl nil more_list_props structures)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (append_from_rr12rr2 subtype
    "list_adt_map[below[2 * length[rewriting_rule](r) + length[rewriting_rule](Alpha2lrr)], below[2 * length[rewriting_rule](r) + length[rewriting_rule](Alpha2lrr)]].map(string_rewriting.ind_rr_conv(list_props[rewriting_rule].length(string_rewriting.r), list_props[rewriting_rule].length(string_rewriting.Alpha2lrr)))(string_rewriting.ind)"
    "list[below[length[rewriting_rule](append[rewriting_rule](r, append[rewriting_rule](r_conv(r), Alpha2lrr)))]]")))
 (append_from_rr12rr2 0
  (append_from_rr12rr2-1 nil 3856291178
   ("" (measure-induct+ "length(ind)" ("r" "ind"))
    (("1" (expand "append_from_rr1" 1)
      (("1" (lift-if)
        (("1" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "map" 2)
            (("2" (assert)
              (("2" (expand "append_from_rr2" 2)
                (("2" (expand "ind_rr_conv" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (rewrite "nth_append")
                        (("1" (assert)
                          (("1" (rewrite "nth_append")
                            (("1" (rewrite "nth_append")
                              (("1"
                                (expand "r_conv" 1 2)
                                (("1"
                                  (rewrite "map_length")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "r_conv" 1 2)
                                      (("1"
                                        (rewrite "map_nth_rw")
                                        (("1"
                                          (expand "exchange")
                                          (("1"
                                            (inst -2 "x!1" "cdr(x!2)")
                                            (("1"
                                              (expand "length" -2 2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 1))
                                (("2"
                                  (expand "r_conv")
                                  (("2"
                                    (rewrite "map_length")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2"
                                (rewrite "length_append")
                                (("2"
                                  (expand "r_conv")
                                  (("2"
                                    (rewrite "map_length")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "nth_append")
                        (("1" (assert)
                          (("1" (rewrite "nth_append")
                            (("1" (expand "r_conv" 1 1)
                              (("1"
                                (rewrite "map_length")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "nth_append")
                                    (("1"
                                      (expand "r_conv" 1 1)
                                      (("1"
                                        (rewrite "map_nth_rw")
                                        (("1"
                                          (expand "exchange")
                                          (("1"
                                            (inst -2 "x!1" "cdr(x!2)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length" 4 2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2"
                                (expand "r_conv")
                                (("2"
                                  (rewrite "map_length")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (rewrite "length_append")
                            (("2" (expand "r_conv")
                              (("2"
                                (rewrite "map_length")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (rewrite "nth_append")
                        (("1" (assert)
                          (("1" (rewrite "nth_append")
                            (("1" (expand "r_conv" 2 (1 5))
                              (("1"
                                (rewrite "map_length")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "Alpha2lrr" 2 (1 3))
                                    (("1"
                                      (rewrite "map_nth_rw")
                                      (("1"
                                        (expand "letter2rr")
                                        (("1"
                                          (inst -1 "x!1" "cdr(x!2)")
                                          (("1"
                                            (expand "length" -1 2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 3)
                                        (("2"
                                          (typepred "car(x!2)")
                                          (("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite "length_append")
                                              (("2"
                                                (expand "r_conv")
                                                (("2"
                                                  (rewrite
                                                   "map_length")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "Alpha2lrr")
                                                      (("2"
                                                        (rewrite
                                                         "map_length")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 3)
                              (("2"
                                (typepred "car(x!2)")
                                (("2"
                                  (rewrite "length_append")
                                  (("2"
                                    (rewrite "length_append")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 3)
                          (("2" (typepred "car(x!2)")
                            (("2" (rewrite "length_append") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2"
        (case "(FORALL (x:
                 [r: list_rewriting_rules,
                  list[below[length(append
                                    (r, append(r_conv(r), Alpha2lrr)))]]]):
         (FORALL (y:
                    [r: list_rewriting_rules,
                     list[below[length(append
                                       (r,
                                        append(r_conv(r), Alpha2lrr)))]]]):
            length(y`2) < length(x`2) IMPLIES
             append_from_rr1(append(y`1, append(r_conv(y`1), Alpha2lrr)),
                             y`2)
              =
              append_from_rr2(append(y`1, append(r_conv(y`1), Alpha2lrr)),
                              map(ind_rr_conv(length(y`1),
                                              length(Alpha2lrr)))
                                 (y`2)))
          IMPLIES
          append_from_rr1(append(x`1, append(r_conv(x`1), Alpha2lrr)), x`2)
           =
           append_from_rr2(append(x`1, append(r_conv(x`1), Alpha2lrr)),
                           map(ind_rr_conv(length(x`1), length(Alpha2lrr)))
                              (x`2)))")
        (("1" (assert)
          (("1" (replace -1)
            (("1" (skeep)
              (("1" (inst -1 "(x_1,x_2)")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -2 "y`1" "y`2")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (case " FORALL (x_1: list_rewriting_rules),
              (x_2:
                 list[below[length(append(x_1,
                                          append
                                          (r_conv(x_1), Alpha2lrr)))]]):
         (FORALL (y_1: list_rewriting_rules),
                 (y_2:
                    list[below[length(append
                                      (y_1,
                                       append(r_conv(y_1), Alpha2lrr)))]]):
            length(y_2) < length(x_2) IMPLIES
             append_from_rr1(append(y_1, append(r_conv(y_1), Alpha2lrr)),
                             y_2)
              =
              append_from_rr2(append(y_1, append(r_conv(y_1), Alpha2lrr)),
                              map(ind_rr_conv(length(y_1),
                                              length(Alpha2lrr)))
                                 (y_2)))
          IMPLIES
          append_from_rr1(append(x_1, append(r_conv(x_1), Alpha2lrr)), x_2)
           =
           append_from_rr2(append(x_1, append(r_conv(x_1), Alpha2lrr)),
                           map(ind_rr_conv(length(x_1), length(Alpha2lrr)))
                              (x_2))")
          (("1" (hide 2)
            (("1" (skeep)
              (("1" (inst -1 "x`1" "x`2")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -2 "(y_1,y_2)")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace 1)
            (("2" (replace 2) (("2" (propax) nil nil)) nil)) nil)
           ("3" (hide-all-but 1)
            (("3" (skeep)
              (("3" (lemma "append_from_rr12rr2_TCC2")
                (("3" (inst?) nil nil)) nil))
              nil))
            nil)
           ("4" (hide-all-but 1)
            (("4" (skeep)
              (("4" (lemma "append_from_rr12rr2_TCC1")
                (("4" (inst?) nil nil)) nil))
              nil))
            nil)
           ("5" (hide-all-but 1)
            (("5" (skeep)
              (("5" (lemma "append_from_rr12rr2_TCC2")
                (("5" (inst?) nil nil)) nil))
              nil))
            nil)
           ("6" (hide-all-but 1)
            (("6" (skeep)
              (("6" (lemma "append_from_rr12rr2_TCC1")
                (("6" (inst?) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1)
          (("3" (skeep)
            (("3" (lemma "append_from_rr12rr2_TCC2")
              (("3" (inst?) nil nil)) nil))
            nil))
          nil)
         ("4" (hide-all-but 1)
          (("4" (skeep)
            (("4" (lemma "append_from_rr12rr2_TCC1")
              (("4" (inst?) (("4" (rewrite "every_forall") nil nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (hide-all-but 1)
          (("5" (skeep)
            (("5" (lemma "append_from_rr12rr2_TCC2")
              (("5" (inst?) nil nil)) nil))
            nil))
          nil)
         ("6" (hide-all-but 1)
          (("6" (skeep)
            (("6" (lemma "append_from_rr12rr2_TCC1")
              (("6" (inst?) (("6" (rewrite "every_forall") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (lemma "append_from_rr12rr2_TCC2") (("3" (inst?) nil nil))
        nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (lemma "append_from_rr12rr2_TCC1") (("4" (inst?) nil nil))
        nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (lemma "append_from_rr12rr2_TCC2") (("5" (inst?) nil nil))
        nil))
      nil)
     ("6" (hide-all-but 1)
      (("6" (lemma "append_from_rr12rr2_TCC1") (("6" (inst?) nil nil))
        nil))
      nil)
     ("7" (hide-all-but 1)
      (("7" (lemma "append_from_rr12rr2_TCC2") (("7" (inst?) nil nil))
        nil))
      nil)
     ("8" (hide-all-but 1)
      (("8" (lemma "append_from_rr12rr2_TCC1")
        (("8" (inst?) (("8" (rewrite "every_forall") nil nil)) nil))
        nil))
      nil)
     ("9" (hide-all-but 1)
      (("9" (lemma "append_from_rr12rr2_TCC2") (("9" (inst?) nil nil))
        nil))
      nil)
     ("10" (hide-all-but 1)
      (("10" (lemma "append_from_rr12rr2_TCC1")
        (("10" (inst?) (("10" (rewrite "every_forall") nil nil)) nil))
        nil))
      nil)
     ("11" (hide-all-but 1)
      (("11" (lemma "append_from_rr12rr2_TCC2")
        (("11" (inst?) nil nil)) nil))
      nil)
     ("12" (hide-all-but 1)
      (("12" (lemma "append_from_rr12rr2_TCC1")
        (("12" (inst?) nil nil)) nil))
      nil))
    nil)
   ((every_forall formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_from_rr22rr1 0
  (append_from_rr22rr1-1 nil 3856346969
   ("" (skeep)
    (("" (lemma "append_from_rr12rr2")
      ((""
        (inst -1 "r"
         "map(ind_rr_conv(length(r), length(Alpha2lrr)))(ind)")
        (("" (rewrite "map_list_composition")
          (("" (use "ind_rr_conv_identity")
            (("1" (replaces -1)
              (("1"
                (rewrite "map_identity[below
                                     [length(Alpha2lrr) + 2 * length(r)]]")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (grind)
                (("2" (rewrite "map_length")
                  (("2" (typepred "Alphabet")
                    (("2" (expand "set2list")
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (expand "length" 2 2)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (map_identity formula-decl nil map_identity nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (TS_reduction_rel_alt_symmetric 0
  (TS_reduction_rel_alt_symmetric-1 nil 3857483038
   ("" (skeep)
    (("" (expand "symmetric?")
      (("" (skeep)
        (("" (expand "TS_reduction_rel_alt")
          (("" (skeep)
            ((""
              (inst 1
               "map(ind_rr_conv(length(r),length(Alpha2lrr)))(ind)")
              (("1" (rewrite "append_from_rr12rr2")
                (("1" (rewrite "append_from_rr22rr1")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2"
                (typepred "map[below[length(Alpha2lrr) + 2 * length(r)],
               below[length(Alpha2lrr) + 2 * length(r)]]
               (ind_rr_conv(length[rewriting_rule](r),
                            length[rewriting_rule](Alpha2lrr)))
               (ind)")
                (("2" (rewrite "every_forall")
                  (("2" (rewrite "every_forall")
                    (("2" (skeep)
                      (("2" (inst?)
                        (("2" (prop)
                          (("2" (rewrite "length_append")
                            (("2" (rewrite "length_append")
                              (("2"
                                (expand "r_conv")
                                (("2"
                                  (rewrite "map_length")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (typepred "ind")
                (("3" (rewrite "every_forall")
                  (("3" (rewrite "every_forall")
                    (("3" (skeep)
                      (("3" (inst?)
                        (("3" (prop)
                          (("3" (rewrite "length_append")
                            (("3" (rewrite "length_append")
                              (("3"
                                (expand "r_conv")
                                (("3"
                                  (rewrite "map_length")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil)
    (every_forall formula-decl nil more_list_props structures))
   shostak))
 (TS_reduction_rel_alt_split 0
  (TS_reduction_rel_alt_split-1 nil 3855758966
   ("" (skeep)
    (("" (expand "TS_reduction_rel_alt")
      (("" (skeep)
        (("" (skeep)
          (("" (inst 1 "append(ind,ind!1)")
            (("" (prop)
              (("1" (rewrite "append_from_rr1_split")
                (("1" (assert) nil nil)) nil)
               ("2" (rewrite "append_from_rr2_split")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (Alpha2lrr_select_from_list1_TCC1 0
  (Alpha2lrr_select_from_list1_TCC1-1 nil 3849821459
   ("" (skeep)
    ((""
      (typepred "select_from_list[(Alphabet)]
               (A,
                set2list[(Alphabet)]
                    (restrict[T, (Alphabet), bool](Alphabet)))")
      (("" (rewrite "every_forall")
        (("" (rewrite "every_forall")
          (("" (skeep)
            (("" (inst?)
              (("" (prop)
                (("" (hide -)
                  (("" (use "select_from_list_proj")
                    (("" (prop)
                      (("1" (expand "Alpha2lrr")
                        (("1" (rewrite "map_length") nil nil)) nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2"
                            (typepred
                             "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                            (("2" (inst?) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil string_rewriting nil)
    (select_from_list def-decl "list[nat]" select_from_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (letter type-eq-decl nil string_rewriting nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (< const-decl "bool" reals nil)
    (rewriting_rule type-eq-decl nil string_rewriting nil)
    (list_rewriting_rules type-eq-decl nil string_rewriting nil)
    (Alpha2lrr const-decl "list_rewriting_rules" string_rewriting nil)
    (below type-eq-decl nil naturalnumbers nil)
    (letter2rr const-decl "rewriting_rule" string_rewriting nil)
    (map_length formula-decl nil more_map_props nil)
    (nth def-decl "T" list_props nil)
    (member const-decl "bool" sets nil)
    (below type-eq-decl nil nat_types nil)
    (select_from_list_proj formula-decl nil select_from_list nil)
    (every_forall formula-decl nil more_list_props structures))
   nil
   (Alpha2lrr_select_from_list1 subtype
    "select_from_list[letter].select_from_list(string_rewriting.A, set_as_list[letter].set2list(restrict[string_rewriting.T, letter, booleans.bool].restrict(string_rewriting.Alphabet)))"
    "list[below[length[rewriting_rule](Alpha2lrr)]]")))
 (Alpha2lrr_select_from_list1 0
  (Alpha2lrr_select_from_list1-1 nil 3849821995
   ("" (measure-induct+ "length(A)" "A")
    (("1" (expand "select_from_list" 1)
      (("1" (lift-if)
        (("1" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "append_from_rr1" 2)
            (("2" (expand "Alpha2lrr" 2 1)
              (("2" (rewrite "map_nth_rw")
                (("1" (rewrite "nth_search")
                  (("1" (expand "letter2rr")
                    (("1" (expand "append" 2)
                      (("1" (expand "append" 2)
                        (("1" (inst -1 "cdr(x!1)")
                          (("1" (expand "length" -1 2)
                            (("1" (assert)
                              (("1"
                                (replaces -1)
                                (("1" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "search_in_Alphabet")
                    (("2" (expand "restrict") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "search_in_Alphabet")
                  (("2" (expand "restrict") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2"
        (typepred "select_from_list[(Alphabet)]
               (A!1,
                set2list[(Alphabet)]
                    (restrict[T, (Alphabet), bool](Alphabet)))")
        (("2" (rewrite "every_forall")
          (("2" (rewrite "every_forall")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (prop)
                  (("2" (hide -)
                    (("2" (use "select_from_list_proj")
                      (("2" (expand "Alpha2lrr")
                        (("2" (rewrite "map_length")
                          (("2" (prop)
                            (("2" (hide 2)
                              (("2"
                                (skeep)
                                (("2"
                                  (typepred
                                   "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                                  (("2"
                                    (inst?)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_forall formula-decl nil more_list_props structures)
    (select_from_list_proj formula-decl nil select_from_list nil)
    (nth_search formula-decl nil select_from_list nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (search_in_Alphabet formula-decl nil select_from_list nil)
    (search def-decl "nat" select_from_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (select_from_list def-decl "list[nat]" select_from_list nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (Alpha2lrr_select_from_list2 0
  (Alpha2lrr_select_from_list2-1 nil 3849823482
   ("" (measure-induct+ "length(A)" "A")
    (("1" (expand "select_from_list" 1)
      (("1" (lift-if)
        (("1" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "append_from_rr2" 2)
            (("2" (expand "Alpha2lrr" 2 1)
              (("2" (rewrite "map_nth_rw")
                (("1" (rewrite "nth_search")
                  (("1" (expand "letter2rr")
                    (("1" (expand "append" 2)
                      (("1" (expand "append" 2)
                        (("1" (inst -1 "cdr(x!1)")
                          (("1" (expand "length" -1 2)
                            (("1" (assert)
                              (("1"
                                (replaces -1)
                                (("1" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "search_in_Alphabet")
                    (("2" (expand "restrict") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "search_in_Alphabet")
                  (("2" (expand "restrict") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2"
        (typepred "select_from_list[(Alphabet)]
                   (A!1,
                    set2list[(Alphabet)]
                        (restrict[T, (Alphabet), bool](Alphabet)))")
        (("2" (rewrite "every_forall")
          (("2" (rewrite "every_forall")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (prop)
                  (("2" (hide -)
                    (("2" (use "select_from_list_proj")
                      (("2" (expand "Alpha2lrr")
                        (("2" (rewrite "map_length")
                          (("2" (prop)
                            (("2" (hide 2)
                              (("2"
                                (skeep)
                                (("2"
                                  (typepred
                                   "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                                  (("2"
                                    (inst?)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_forall formula-decl nil more_list_props structures)
    (select_from_list_proj formula-decl nil select_from_list nil)
    (nth_search formula-decl nil select_from_list nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (search_in_Alphabet formula-decl nil select_from_list nil)
    (search def-decl "nat" select_from_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (select_from_list def-decl "list[nat]" select_from_list nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (TS_reduction_rel_alt_reflexive 0
  (TS_reduction_rel_alt_reflexive-1 nil 3857483728
   ("" (skeep)
    (("" (expand "reflexive?")
      (("" (skeep)
        (("" (expand "TS_reduction_rel_alt")
          ((""
            (inst 1
             "map[below[length(Alpha2lrr)],below[length(append(r,append(r_conv(r),Alpha2lrr)))]](lambda(i : below[length(Alpha2lrr)]): i + length(append(r,r_conv(r))))(select_from_list(x,set2list(Alphabet)))")
            (("1" (prop)
              (("1" (lemma "append_from_rr1_append2")
                (("1" (rewrite "append_assoc" :dir rl)
                  (("1"
                    (inst -1 "append(r, r_conv(r))" "Alpha2lrr"
                     "select_from_list(x,
                                                  set2list
                                                  (restrict[T, (Alphabet), bool]
                                                   (Alphabet))) ")
                    (("1" (expand "restrict" -1 1)
                      (("1"
                        (case "map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (LAMBDA (s: below[length(Alpha2lrr)]):
                             s + length(append(r, r_conv(r))))
                          (select_from_list(x,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet)))) =  map[below[length(Alpha2lrr)],
                           below[length(append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                           (LAMBDA (i: below[length(Alpha2lrr)]):
                              i + length(append(r, r_conv(r))))
                           (select_from_list(x,
                                             set2list
                                             (restrict[T, (Alphabet), bool]
                                              (Alphabet))))")
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1"
                              (rewrite "Alpha2lrr_select_from_list1")
                              nil nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2"
                            (use "subtype_map[below[length(Alpha2lrr)],below[length(append(r, append(r_conv(r), Alpha2lrr)))] ,below[length(Alpha2lrr)],below[length(append(append(r, r_conv(r)), Alpha2lrr))]]")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (typepred "s")
                                  (("2"
                                    (rewrite "length_append")
                                    (("2"
                                      (rewrite "length_append")
                                      (("2"
                                        (rewrite "length_append")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (skeep)
                                (("3"
                                  (typepred "i")
                                  (("3"
                                    (rewrite "length_append")
                                    (("3"
                                      (rewrite "length_append")
                                      (("3"
                                        (rewrite "length_append")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4"
                                (skeep)
                                (("4"
                                  (typepred "x!1")
                                  (("4"
                                    (rewrite "length_append")
                                    (("4"
                                      (rewrite "length_append")
                                      (("4"
                                        (rewrite "length_append")
                                        (("4"
                                          (rewrite "length_append")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skeep)
                            (("3" (typepred "i")
                              (("3"
                                (rewrite "length_append")
                                (("3"
                                  (rewrite "length_append")
                                  (("3"
                                    (rewrite "length_append")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1)
                          (("4" (skeep)
                            (("4" (typepred "s")
                              (("4"
                                (rewrite "length_append")
                                (("4"
                                  (hide-all-but 1)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (typepred "s")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (rewrite "length_append")
                                          (("4"
                                            (assert)
                                            (("4"
                                              (rewrite "length_append")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "append_from_rr2_append2")
                (("2" (rewrite "append_assoc" :dir rl)
                  (("2"
                    (inst -1 "append(r, r_conv(r))" "Alpha2lrr"
                     "select_from_list(x,
                                             set2list
                                             (restrict[T, (Alphabet), bool]
                                              (Alphabet)))")
                    (("2" (expand "restrict" -1 1)
                      (("2"
                        (case "map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (LAMBDA (s: below[length(Alpha2lrr)]):
                             s + length(append(r, r_conv(r))))
                          (select_from_list(x,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet)))) = map[below[length(Alpha2lrr)],
                           below[length(append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                           (LAMBDA (i: below[length(Alpha2lrr)]):
                              i + length(append(r, r_conv(r))))
                           (select_from_list(x,
                                             set2list
                                             (restrict[T, (Alphabet), bool]
                                              (Alphabet))))")
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1"
                              (rewrite "Alpha2lrr_select_from_list2")
                              nil nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2"
                            (use "subtype_map[below[length(Alpha2lrr)],below[length(append(r, append(r_conv(r), Alpha2lrr)))] ,below[length(Alpha2lrr)],below[length(append(append(r, r_conv(r)), Alpha2lrr))]]")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (typepred "s")
                                  (("2"
                                    (rewrite "length_append")
                                    (("2"
                                      (rewrite "length_append")
                                      (("2"
                                        (rewrite "length_append")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (skeep)
                                (("3"
                                  (typepred "i")
                                  (("3"
                                    (rewrite "length_append")
                                    (("3"
                                      (rewrite "length_append")
                                      (("3"
                                        (rewrite "length_append")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4"
                                (skeep)
                                (("4"
                                  (typepred "x!1")
                                  (("4"
                                    (rewrite "length_append")
                                    (("4"
                                      (rewrite "length_append")
                                      (("4"
                                        (rewrite "length_append")
                                        (("4"
                                          (rewrite "length_append")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skeep)
                            (("3" (typepred "i")
                              (("3"
                                (rewrite "length_append")
                                (("3"
                                  (rewrite "length_append")
                                  (("3"
                                    (rewrite "length_append")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1)
                          (("4" (skeep)
                            (("4" (typepred "s")
                              (("4"
                                (rewrite "length_append")
                                (("4"
                                  (rewrite "length_append")
                                  (("4"
                                    (rewrite "length_append")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "i")
                (("2" (rewrite "length_append")
                  (("2" (rewrite "length_append")
                    (("2" (rewrite "length_append")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3"
              (typepred "select_from_list[(Alphabet)]
               (x,
                set2list[(Alphabet)]
                    (restrict[T, (Alphabet), bool](Alphabet)))")
              (("3" (rewrite "every_forall")
                (("3" (rewrite "every_forall")
                  (("3" (skeep)
                    (("3" (inst?)
                      (("3" (prop)
                        (("3" (hide -)
                          (("3" (use "select_from_list_proj")
                            (("3" (prop)
                              (("1"
                                (expand "Alpha2lrr")
                                (("1" (rewrite "map_length") nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred
                                     "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                                    (("2"
                                      (inst?)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((select_from_list_proj formula-decl nil select_from_list nil)
    (every_forall formula-decl nil more_list_props structures)
    (subtype_map formula-decl nil subtype_map nil)
    (list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (select_from_list def-decl "list[nat]" select_from_list nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures))
   shostak))
 (TS_congruence_context_closed 0
  (TS_congruence_context_closed-1 nil 3858179721
   ("" (skeep)
    (("" (expand "TS_congruence")
      (("" (expand "preorder_closure")
        (("" (expand "IUnion")
          ((""
            (case "FORALL(i : nat, s1, s2, A, B : string): iterate(TS_reduction_rel(r), i)(s1, s2) => iterate(TS_reduction_rel(r), i)
               (append(A, append(s1, B)), append(A, append(s2, B)))")
            (("1" (skeep)
              (("1" (inst?)
                (("1" (inst?)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (measure-induct+ "i" "i")
                (("2" (skeep)
                  (("2" (expand "iterate" -2)
                    (("2" (prop)
                      (("1" (replace -1)
                        (("1" (replace -2)
                          (("1" (expand "iterate" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "o ")
                        (("2" (skeep)
                          (("2" (expand "iterate" 2)
                            (("2" (assert)
                              (("2"
                                (expand "o ")
                                (("2"
                                  (inst 2 "append(A!1,append(y,B!1))")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -3 "x!1-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -3
                                           "s1!1"
                                           "y"
                                           "A!1"
                                           "B!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -3)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "TS_reduction_rel")
                                          (("2"
                                            (expand
                                             "symmetric_closure")
                                            (("2"
                                              (expand "union")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand
                                                       "reduction_rel")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "i")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "append(A!1,A!2)"
                                                               "append(B!2,B!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_assoc")
                                                                    (("1"
                                                                      (rewrite
                                                                       "append_assoc")
                                                                      (("1"
                                                                        (rewrite
                                                                         "append_assoc")
                                                                        (("1"
                                                                          (rewrite
                                                                           "append_assoc")
                                                                          (("1"
                                                                            (rewrite
                                                                             "append_assoc")
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_assoc")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "converse")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (hide 1 3)
                                                      (("2"
                                                        (expand
                                                         "reduction_rel")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "append(A!1,A!2)"
                                                                 "append(B!2,B!1)")
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "append_assoc")
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_assoc")
                                                                        (("2"
                                                                          (rewrite
                                                                           "append_assoc")
                                                                          (("2"
                                                                            (rewrite
                                                                             "append_assoc")
                                                                            (("2"
                                                                              (rewrite
                                                                               "append_assoc")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "append_assoc")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric_closure const-decl "(symmetric?)" closure_ops orders)
    (list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (preorder_closure const-decl "(preorder?)" closure_ops orders))
   shostak))
 (TS_congruence_monotone 0
  (TS_congruence_monotone-1 nil 3849903003
   ("" (skeep)
    (("" (lemma "TS_congruence_context_closed")
      (("" (inst -1 "A" "null" "s1" "s2" "r")
        (("" (assert)
          (("" (rewrite "append_null")
            (("" (rewrite "append_null") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subset_alt 0
  (subset_alt-1 nil 3849729920
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "member")
          (("" (expand "reduction_rel")
            (("" (skeep)
              (("" (skeep)
                (("" (lemma "append_from_rr1_split")
                  ((""
                    (inst -1 "append(r, append(r_conv(r), Alpha2lrr))"
                     "map[below[length(Alpha2lrr)],below[length(append(r,
                                         append(r_conv(r), Alpha2lrr)))] ](LAMBDA (k: below[length(Alpha2lrr)]):
                                          length(append(r, r_conv(r))) + k)
                                       (select_from_list(A,
                                                         set2list
                                                         (restrict
                                                          [T, (Alphabet), bool]
                                                          (Alphabet))))"
                     "cons(i,
                                         map[below[length(Alpha2lrr)],below[length(append(r,
                                         append(r_conv(r), Alpha2lrr)))] ](LAMBDA
                                             (k: below[length(Alpha2lrr)]):
                                             length(append(r, r_conv(r))) + k)
                                            (select_from_list
                                             (B,
                                              set2list
                                              (restrict[T, (Alphabet), bool]
                                               (Alphabet)))))")
                    (("1" (lemma "append_from_rr1_append2")
                      (("1"
                        (inst -1 "append(r,r_conv(r))" "Alpha2lrr"
                         "select_from_list(A,
                                                           set2list
                                                           (restrict
                                                            [T, (Alphabet), bool]
                                                            (Alphabet)))")
                        (("1" (rewrite "append_assoc")
                          (("1" (expand "restrict" -1 1)
                            (("1"
                              (case "map[below[length(Alpha2lrr)],
                                  below[length
                                        (append
                                         (r,
                                          append(r_conv(r), Alpha2lrr)))]]
                                  (LAMBDA (k: below[length(Alpha2lrr)]):
                                     length(append(r, r_conv(r))) + k)
                                  (select_from_list(A,
                                                    set2list
                                                    (restrict
                                                     [T, (Alphabet), bool]
                                                     (Alphabet)))) = map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (LAMBDA (s: below[length(Alpha2lrr)]):
                             s + length(append(r, r_conv(r))))
                          (select_from_list(A,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet))))")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (rewrite
                                     "Alpha2lrr_select_from_list1")
                                    (("1"
                                      (expand "append_from_rr1")
                                      (("1"
                                        (rewrite "nth_append")
                                        (("1"
                                          (lemma
                                           "append_from_rr1_append2")
                                          (("1"
                                            (inst
                                             -1
                                             "append(r,r_conv(r))"
                                             "Alpha2lrr"
                                             "select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet)))")
                                            (("1"
                                              (rewrite "append_assoc")
                                              (("1"
                                                (case
                                                 "map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (restrict
                               [nat,
                                below[length[rewriting_rule](Alpha2lrr)],
                                numfield]
                               (LAMBDA (i: nat):
                                  i + length(append(r, r_conv(r)))))
                          (select_from_list(B,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet)))) =  map
                                     [below[length(Alpha2lrr)],
                                      below
                                      [length
                                       (append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                                     (LAMBDA
                                      (k: below[length(Alpha2lrr)]):
                                      k + length(append(r, r_conv(r))))
                                     (select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet))))")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (rewrite
                                                       "Alpha2lrr_select_from_list1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (expand
                                                             "TS_reduction_rel_alt")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "append(map[below[length(Alpha2lrr)],below[length(append(r,append(r_conv(r),Alpha2lrr)))]](lambda(s : below[length(Alpha2lrr)]): s + length(append(r,r_conv(r))))(select_from_list(A,set2list(Alphabet))),append((: i :),map[below[length(Alpha2lrr)],below[length(append(r,append(r_conv(r),Alpha2lrr)))]](lambda(s : below[length(Alpha2lrr)]): s + length(append(r,r_conv(r))))(select_from_list(B,set2list(Alphabet))) ))")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "append_from_rr1_split")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "append(r, append(r_conv(r), Alpha2lrr))"
                                                                         "map[below[length(Alpha2lrr)],
                                  below[length
                                        (append
                                         (r,
                                          append(r_conv(r), Alpha2lrr)))]]
                                  (LAMBDA (s: below[length(Alpha2lrr)]):
                                     s + length(append(r, r_conv(r))))
                                  (select_from_list(A,
                                                    set2list
                                                    (restrict
                                                     [T, (Alphabet), bool]
                                                     (Alphabet))))"
                                                                         " append((: i :),
                                     map
                                     [below[length(Alpha2lrr)],
                                      below
                                      [length
                                       (append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                                     (LAMBDA
                                      (s: below[length(Alpha2lrr)]):
                                      s + length(append(r, r_conv(r))))
                                     (select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet)))))")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "append_from_rr1_split")
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "append(r, append(r_conv(r), Alpha2lrr))"
                                                                                 "(: i :)"
                                                                                 "map
                                     [below[length(Alpha2lrr)],
                                      below
                                      [length
                                       (append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                                     (LAMBDA
                                      (s: below[length(Alpha2lrr)]):
                                      s + length(append(r, r_conv(r))))
                                     (select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet))))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "append_from_rr1_append2")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "append(r,r_conv(r))"
                                                                                       "Alpha2lrr"
                                                                                       "select_from_list(A,
                                                    set2list
                                                    (restrict
                                                     [T, (Alphabet), bool]
                                                     (Alphabet)))")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (case
                                                                                           "map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (LAMBDA (s: below[length(Alpha2lrr)]):
                             s + length(append(r, r_conv(r))))
                          (select_from_list(A,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet)))) = map[below[length(Alpha2lrr)],
                                  below[length
                                        (append
                                         (r,
                                          append(r_conv(r), Alpha2lrr)))]]
                                  (LAMBDA (s: below[length(Alpha2lrr)]):
                                     s + length(append(r, r_conv(r))))
                                  (select_from_list(A,
                                                    set2list
                                                    (restrict
                                                     [T, (Alphabet), bool]
                                                     (Alphabet))))")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "append_assoc")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "Alpha2lrr_select_from_list1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "append_from_rr1"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "append_from_rr1"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "append_null")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "nth_append")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "append_from_rr1_append2")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "append(r,r_conv(r))"
                                                                                                               "Alpha2lrr"
                                                                                                               "select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet)))")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "restrict"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (LAMBDA (s: below[length(Alpha2lrr)]):
                             s + length(append(r, r_conv(r))))
                          (select_from_list(B,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet)))) = map
                                     [below[length(Alpha2lrr)],
                                      below
                                      [length
                                       (append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                                     (LAMBDA
                                      (s: below[length(Alpha2lrr)]):
                                      s + length(append(r, r_conv(r))))
                                     (select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet))))")
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "append_assoc")
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "Alpha2lrr_select_from_list1")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "subtype_map[below[length(Alpha2lrr)], below[length(append(r, append(r_conv(r), Alpha2lrr)))],below[length(Alpha2lrr)],below[length(append(append(r, r_conv(r)), Alpha2lrr))]]")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "s")
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "length_append")
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "length_append")
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "length_append")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (skeep)
                                                                                                                          (("3"
                                                                                                                            (typepred
                                                                                                                             "s")
                                                                                                                            (("3"
                                                                                                                              (rewrite
                                                                                                                               "length_append")
                                                                                                                              (("3"
                                                                                                                                (rewrite
                                                                                                                                 "length_append")
                                                                                                                                (("3"
                                                                                                                                  (rewrite
                                                                                                                                   "length_append")
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("4"
                                                                                                                          (skeep)
                                                                                                                          (("4"
                                                                                                                            (typepred
                                                                                                                             "x!1")
                                                                                                                            (("4"
                                                                                                                              (rewrite
                                                                                                                               "length_append")
                                                                                                                              (("4"
                                                                                                                                (rewrite
                                                                                                                                 "length_append")
                                                                                                                                (("4"
                                                                                                                                  (rewrite
                                                                                                                                   "length_append")
                                                                                                                                  (("4"
                                                                                                                                    (rewrite
                                                                                                                                     "length_append")
                                                                                                                                    (("4"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "subtype_map[below[length(Alpha2lrr)], below[length(append(r, append(r_conv(r), Alpha2lrr)))],below[length(Alpha2lrr)],below[length(append(append(r, r_conv(r)), Alpha2lrr))]]")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "s")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "length_append")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "length_append")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "length_append")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (skeep)
                                                                                                  (("3"
                                                                                                    (typepred
                                                                                                     "s")
                                                                                                    (("3"
                                                                                                      (rewrite
                                                                                                       "length_append")
                                                                                                      (("3"
                                                                                                        (rewrite
                                                                                                         "length_append")
                                                                                                        (("3"
                                                                                                          (rewrite
                                                                                                           "length_append")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("4"
                                                                                                  (skeep)
                                                                                                  (("4"
                                                                                                    (typepred
                                                                                                     "x!1")
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "length_append")
                                                                                                      (("4"
                                                                                                        (rewrite
                                                                                                         "length_append")
                                                                                                        (("4"
                                                                                                          (rewrite
                                                                                                           "length_append")
                                                                                                          (("4"
                                                                                                            (rewrite
                                                                                                             "length_append")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "s")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "length_append")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "length_append")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_append")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "i")
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "length_append")
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "length_append")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "every")
                                                                            (("2"
                                                                              (expand
                                                                               "every")
                                                                              (("2"
                                                                                (typepred
                                                                                 "i")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "length_append")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "length_append")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (typepred
                                                                               "s")
                                                                              (("3"
                                                                                (rewrite
                                                                                 "length_append")
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "length_append")
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     "length_append")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "append_from_rr2_split")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -1
                                                                       "append(r, append(r_conv(r), Alpha2lrr))"
                                                                       "map[below[length(Alpha2lrr)],
                                  below[length
                                        (append
                                         (r,
                                          append(r_conv(r), Alpha2lrr)))]]
                                  (LAMBDA (s: below[length(Alpha2lrr)]):
                                     s + length(append(r, r_conv(r))))
                                  (select_from_list(A,
                                                    set2list
                                                    (restrict
                                                     [T, (Alphabet), bool]
                                                     (Alphabet))))"
                                                                       " append((: i :),
                                     map
                                     [below[length(Alpha2lrr)],
                                      below
                                      [length
                                       (append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                                     (LAMBDA
                                      (s: below[length(Alpha2lrr)]):
                                      s + length(append(r, r_conv(r))))
                                     (select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet)))))")
                                                                      (("1"
                                                                        (replaces
                                                                         -2)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "append(r, append(r_conv(r), Alpha2lrr))"
                                                                           "(: i :)"
                                                                           "map
                                     [below[length(Alpha2lrr)],
                                      below
                                      [length
                                       (append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                                     (LAMBDA
                                      (s: below[length(Alpha2lrr)]):
                                      s + length(append(r, r_conv(r))))
                                     (select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet))))")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "append_from_rr2_append2")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "append(r,r_conv(r))"
                                                                                 "Alpha2lrr"
                                                                                 "select_from_list(A,
                                                    set2list
                                                    (restrict
                                                     [T, (Alphabet), bool]
                                                     (Alphabet)))")
                                                                                (("1"
                                                                                  (expand
                                                                                   "restrict"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (LAMBDA (s: below[length(Alpha2lrr)]):
                             s + length(append(r, r_conv(r))))
                          (select_from_list(A,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet)))) = map[below[length(Alpha2lrr)],
                                  below[length
                                        (append
                                         (r,
                                          append(r_conv(r), Alpha2lrr)))]]
                                  (LAMBDA (s: below[length(Alpha2lrr)]):
                                     s + length(append(r, r_conv(r))))
                                  (select_from_list(A,
                                                    set2list
                                                    (restrict
                                                     [T, (Alphabet), bool]
                                                     (Alphabet))))")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "append_assoc")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "Alpha2lrr_select_from_list2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "append_from_rr2"
                                                                                               1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "append_from_rr2"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "append_null")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "nth_append")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "append_from_rr2_append2")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "append(r,r_conv(r))"
                                                                                                         "Alpha2lrr"
                                                                                                         "select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet)))")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "map[below[length(Alpha2lrr)],
                          below[length(append
                                       (append(r, r_conv(r)), Alpha2lrr))]]
                          (restrict
                               [nat,
                                below[length[rewriting_rule](Alpha2lrr)],
                                numfield]
                               (LAMBDA (i: nat):
                                  i + length(append(r, r_conv(r)))))
                          (select_from_list(B,
                                            set2list
                                            (restrict[T, (Alphabet), bool]
                                             (Alphabet)))) = map
                                     [below[length(Alpha2lrr)],
                                      below
                                      [length
                                       (append
                                        (r, append(r_conv(r), Alpha2lrr)))]]
                                     (LAMBDA
                                      (s: below[length(Alpha2lrr)]):
                                      s + length(append(r, r_conv(r))))
                                     (select_from_list
                                      (B,
                                       set2list
                                       (restrict[T, (Alphabet), bool]
                                        (Alphabet))))")
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "append_assoc")
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "Alpha2lrr_select_from_list2")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "subtype_map[below[length(Alpha2lrr)], below[length(append(r, append(r_conv(r), Alpha2lrr)))],below[length(Alpha2lrr)],below[length(append(append(r, r_conv(r)), Alpha2lrr))]]")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "restrict")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "s")
                                                                                                                    (("3"
                                                                                                                      (rewrite
                                                                                                                       "length_append")
                                                                                                                      (("3"
                                                                                                                        (rewrite
                                                                                                                         "length_append")
                                                                                                                        (("3"
                                                                                                                          (rewrite
                                                                                                                           "length_append")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("4"
                                                                                                                  (skeep)
                                                                                                                  (("4"
                                                                                                                    (typepred
                                                                                                                     "x!1")
                                                                                                                    (("4"
                                                                                                                      (rewrite
                                                                                                                       "length_append")
                                                                                                                      (("4"
                                                                                                                        (rewrite
                                                                                                                         "length_append")
                                                                                                                        (("4"
                                                                                                                          (rewrite
                                                                                                                           "length_append")
                                                                                                                          (("4"
                                                                                                                            (rewrite
                                                                                                                             "length_append")
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "subtype_map[below[length(Alpha2lrr)], below[length(append(r, append(r_conv(r), Alpha2lrr)))],below[length(Alpha2lrr)],below[length(append(append(r, r_conv(r)), Alpha2lrr))]]")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "s")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "length_append")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "length_append")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "length_append")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("3"
                                                                                            (skeep)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "s")
                                                                                              (("3"
                                                                                                (rewrite
                                                                                                 "length_append")
                                                                                                (("3"
                                                                                                  (rewrite
                                                                                                   "length_append")
                                                                                                  (("3"
                                                                                                    (rewrite
                                                                                                     "length_append")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("4"
                                                                                            (skeep)
                                                                                            (("4"
                                                                                              (typepred
                                                                                               "x!1")
                                                                                              (("4"
                                                                                                (rewrite
                                                                                                 "length_append")
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   "length_append")
                                                                                                  (("4"
                                                                                                    (rewrite
                                                                                                     "length_append")
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "length_append")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "s")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "length_append")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "length_append")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "length_append")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("3"
                                                                              (typepred
                                                                               "i")
                                                                              (("3"
                                                                                (rewrite
                                                                                 "length_append")
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "length_append")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "every")
                                                                          (("2"
                                                                            (expand
                                                                             "every")
                                                                            (("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "length_append")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "length_append")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (typepred
                                                                             "s")
                                                                            (("3"
                                                                              (rewrite
                                                                               "length_append")
                                                                              (("3"
                                                                                (rewrite
                                                                                 "length_append")
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "length_append")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "append"
                                                                   1
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "every")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (typepred
                                                                           "i")
                                                                          (("1"
                                                                            (rewrite
                                                                             "length_append")
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_append")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "map[below[length[rewriting_rule](Alpha2lrr)],
                below[length[rewriting_rule]
                          (append[rewriting_rule]
                               (r,
                                append[rewriting_rule]
                                    (r_conv(r), Alpha2lrr)))]]
                (LAMBDA (s: below[length[rewriting_rule](Alpha2lrr)]):
                   s +
                    length[rewriting_rule]
                        (append[rewriting_rule](r, r_conv(r))))
                (select_from_list[(Alphabet)]
                     (B,
                      set2list[(Alphabet)]
                          (restrict[T, (Alphabet), bool](Alphabet))))")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (typepred
                                                                   "select_from_list[(Alphabet)]
               (B,
                set2list[(Alphabet)]
                    (restrict[T, (Alphabet), bool](Alphabet)))")
                                                                  (("3"
                                                                    (rewrite
                                                                     "every_forall")
                                                                    (("3"
                                                                      (rewrite
                                                                       "every_forall")
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (prop)
                                                                            (("3"
                                                                              (hide
                                                                               -)
                                                                              (("3"
                                                                                (use
                                                                                 "select_from_list_proj")
                                                                                (("3"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "Alpha2lrr")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "map_length")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 1)
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (typepred
                                                                     "s")
                                                                    (("4"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("4"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("4"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide-all-but
                                                                 1)
                                                                (("5"
                                                                  (typepred
                                                                   "select_from_list[(Alphabet)]
               (A,
                set2list[(Alphabet)]
                    (restrict[T, (Alphabet), bool](Alphabet)))")
                                                                  (("5"
                                                                    (rewrite
                                                                     "every_forall")
                                                                    (("5"
                                                                      (rewrite
                                                                       "every_forall")
                                                                      (("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (inst?)
                                                                          (("5"
                                                                            (prop)
                                                                            (("5"
                                                                              (hide
                                                                               -)
                                                                              (("5"
                                                                                (use
                                                                                 "select_from_list_proj")
                                                                                (("5"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "Alpha2lrr")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "map_length")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand
                                                     "restrict"
                                                     1
                                                     1)
                                                    (("2"
                                                      (case
                                                       "(LAMBDA (s: below[length(Alpha2lrr)]):
             s + length(append(r, r_conv(r))) ) = (LAMBDA (k: below[length(Alpha2lrr)]):
              k + length(append(r, r_conv(r))) )")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (rewrite
                                                           "subtype_map[below[length(Alpha2lrr)],below[length(append(append(r, r_conv(r)), Alpha2lrr))] ,below[length(Alpha2lrr)] ,below[length(append(r, append(r_conv(r), Alpha2lrr)))] ]")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (prop)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("5"
                                                        (expand
                                                         "restrict")
                                                        (("5"
                                                          (typepred
                                                           "x1")
                                                          (("5"
                                                            (rewrite
                                                             "length_append")
                                                            (("5"
                                                              (rewrite
                                                               "length_append")
                                                              (("5"
                                                                (rewrite
                                                                 "length_append")
                                                                (("5"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (case
                                   "(LAMBDA (k: below[length(Alpha2lrr)]):
             length(append(r, r_conv(r))) + k )= (LAMBDA (s: below[length(Alpha2lrr)]):
              s + length(append(r, r_conv(r))))")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite
                                         "subtype_map[below[length(Alpha2lrr)],below[length(append(r, append(r_conv(r), Alpha2lrr)))] ,below[length(Alpha2lrr)] ,below[length(append(append(r, r_conv(r)), Alpha2lrr))] ]")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "x!1")
                                              (("1"
                                                (rewrite
                                                 "length_append")
                                                (("1"
                                                  (rewrite
                                                   "length_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_append")
                                                    (("1"
                                                      (rewrite
                                                       "length_append")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (decompose-equality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (typepred "s")
                                    (("3"
                                      (rewrite "length_append")
                                      (("3"
                                        (rewrite "length_append")
                                        (("3"
                                          (rewrite "length_append")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide-all-but 1)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (typepred "k")
                                    (("4"
                                      (rewrite "length_append")
                                      (("4"
                                        (rewrite "length_append")
                                        (("4"
                                          (rewrite "length_append")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2"
                        (typepred "select_from_list[(Alphabet)]
               (B,
                set2list[(Alphabet)]
                    (restrict[T, (Alphabet), bool](Alphabet)))")
                        (("2" (rewrite "every_forall")
                          (("2" (rewrite "every_forall")
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2"
                                  (prop)
                                  (("2"
                                    (use "select_from_list_proj")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (expand "Alpha2lrr")
                                        (("1"
                                          (rewrite "map_length")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred
                                             "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (typepred "i")
                        (("3" (rewrite "length_append")
                          (("3" (rewrite "length_append")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1)
                      (("4" (skeep)
                        (("4" (typepred "k")
                          (("4" (rewrite "length_append")
                            (("4" (rewrite "length_append")
                              (("4"
                                (rewrite "length_append")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but 1)
                      (("5"
                        (typepred "select_from_list[(Alphabet)]
               (A,
                set2list[(Alphabet)]
                    (restrict[T, (Alphabet), bool](Alphabet)))")
                        (("5" (rewrite "every_forall")
                          (("5" (rewrite "every_forall")
                            (("5" (skeep)
                              (("5"
                                (inst?)
                                (("5"
                                  (prop)
                                  (("5"
                                    (hide -)
                                    (("5"
                                      (use "select_from_list_proj")
                                      (("5"
                                        (prop)
                                        (("1"
                                          (expand "Alpha2lrr")
                                          (("1"
                                            (rewrite "map_length")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred
                                               "set2list[(Alphabet)](restrict[T, (Alphabet), bool](Alphabet))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subtype_map formula-decl nil subtype_map nil)
    (select_from_list_proj formula-decl nil select_from_list nil)
    (every_forall formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (select_from_list def-decl "list[nat]" select_from_list nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures))
   shostak))
 (alt_subset 0
  (alt_subset-1 nil 3849872602
   ("" (skeep)
    (("" (expand "reduction_rel_alt")
      (("" (expand "subset?")
        (("" (skeep)
          (("" (expand "member")
            ((""
              (case "FORALL (ind: list[below[length(append(r, append(r_conv(r),Alpha2lrr)))]], x : [string,string]):
               (x`1 = append_from_rr1(append(r,append(r_conv(r), Alpha2lrr)), ind) AND
                x`2 = append_from_rr2(append(r, append(r_conv(r),Alpha2lrr)), ind) => TS_congruence(r)(x))")
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(ind)" "ind")
                  (("2" (skeep)
                    (("2" (expand "append_from_rr1" -2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "append_from_rr2" -4)
                            (("1" (assert)
                              (("1"
                                (expand "TS_congruence" 1)
                                (("1"
                                  (expand "preorder_closure")
                                  (("1"
                                    (expand "IUnion")
                                    (("1"
                                      (inst 1 "0")
                                      (("1"
                                        (expand "iterate")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "append_from_rr2" -3)
                            (("2" (assert)
                              (("2"
                                (inst -2 "cdr(x!1)")
                                (("2"
                                  (expand "length" -2 2)
                                  (("2"
                                    (inst
                                     -2
                                     "(append_from_rr1(append(r, append(r_conv(r),Alpha2lrr)), cdr(x!1)),append_from_rr2(append(r, append(r_conv(r), Alpha2lrr)), cdr(x!1)))")
                                    (("2"
                                      (expand "TS_congruence")
                                      (("2"
                                        (expand "preorder_closure")
                                        (("2"
                                          (expand "IUnion")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (rewrite "nth_append")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "TS_congruence_monotone")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "nth(r, car(x!1))`1"
                                                       "append_from_rr1(append(r, append(r_conv(r),Alpha2lrr)), cdr(x!1))"
                                                       "append_from_rr2(append(r, append(r_conv(r),Alpha2lrr)), cdr(x!1))"
                                                       "r")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "TS_congruence")
                                                          (("1"
                                                            (expand
                                                             "preorder_closure")
                                                            (("1"
                                                              (expand
                                                               "IUnion")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   2
                                                                   "i!1+1")
                                                                  (("1"
                                                                    (expand
                                                                     "iterate"
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "o ")
                                                                      (("1"
                                                                        (inst
                                                                         2
                                                                         "append(nth(r, car(x!1))`1,
                                 append_from_rr2(append(r, append(r_conv(r),Alpha2lrr)), cdr(x!1)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "TS_reduction_rel"
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "symmetric_closure")
                                                                                (("1"
                                                                                  (expand
                                                                                   "union")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member"
                                                                                       2)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-2
                                                                                          2))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "reduction_rel")
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "car(x!1)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "null"
                                                                                               "append_from_rr2(append(r, append(r_conv(r),Alpha2lrr)), cdr(x!1))")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "append"
                                                                                                 1
                                                                                                 (4
                                                                                                  11))
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-5 1))
                                                          (("2"
                                                            (expand
                                                             "TS_congruence")
                                                            (("2"
                                                              (expand
                                                               "preorder_closure")
                                                              (("2"
                                                                (expand
                                                                 "IUnion")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "i")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "nth_append")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "TS_congruence_monotone")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "nth(r_conv(r), car(x!1) - length(r))`1"
                                                             "append_from_rr1(append(r, append(r_conv(r),Alpha2lrr)), cdr(x!1))"
                                                             "append_from_rr2(append(r, append(r_conv(r),Alpha2lrr)), cdr(x!1))"
                                                             "r")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "TS_congruence")
                                                                (("1"
                                                                  (expand
                                                                   "preorder_closure")
                                                                  (("1"
                                                                    (expand
                                                                     "IUnion")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         4
                                                                         "i!1+1")
                                                                        (("1"
                                                                          (expand
                                                                           "iterate"
                                                                           4)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "o ")
                                                                              (("1"
                                                                                (inst
                                                                                 4
                                                                                 "append(nth(r_conv(r), car(x!1) - length(r))`1,
                     append_from_rr2(append
                                     (r, append(r_conv(r), Alpha2lrr)),
                                     cdr(x!1)))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "TS_reduction_rel"
                                                                                       4)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "symmetric_closure")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "converse")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "reduction_rel")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      5
                                                                                                      -2))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       2
                                                                                                       "car(x!1)-length(r)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         2
                                                                                                         "null"
                                                                                                         "append_from_rr2(append(r, append(r_conv(r), Alpha2lrr)),
                               cdr(x!1))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "append"
                                                                                                           2
                                                                                                           (4))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append"
                                                                                                             2
                                                                                                             (10))
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "r_conv"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "map_nth_rw")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "exchange")
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "r_conv"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "map_nth_rw")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "exchange")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "r_conv")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "map_length")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "TS_congruence")
                                                                (("2"
                                                                  (expand
                                                                   "preorder_closure")
                                                                  (("2"
                                                                    (expand
                                                                     "IUnion")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "i")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           6
                                                           "i+1")
                                                          (("2"
                                                            (expand
                                                             "iterate"
                                                             6)
                                                            (("2"
                                                              (expand
                                                               "o ")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     "TS_congruence_monotone")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "nth(Alpha2lrr,
                           car(x!1) - length(r_conv(r)) - length(r))`1"
                                                                       "append_from_rr1(append(r, append(r_conv(r), Alpha2lrr)),
                              cdr(x!1))"
                                                                       "append_from_rr2(append(r, append(r_conv(r), Alpha2lrr)),
                              cdr(x!1))"
                                                                       "r")
                                                                      (("1"
                                                                        (case
                                                                         "nth(Alpha2lrr,
                           car(x!1) - length(r_conv(r)) - length(r))`1 = nth(Alpha2lrr,
                                      car(x!1) - length(r_conv(r))
                                      -
                                      length(r))`2")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "TS_congruence")
                                                                              (("1"
                                                                                (expand
                                                                                 "preorder_closure")
                                                                                (("1"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "i")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "Alpha2lrr")
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_nth_rw")
                                                                              (("1"
                                                                                (expand
                                                                                 "letter2rr")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 (1
                                                                                  2))
                                                                                (("2"
                                                                                  (typepred
                                                                                   "car(x!1)")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "length_append")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "length_append")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Alpha2lrr")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "map_length")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 2 3))
                                                      (("2"
                                                        (typepred
                                                         "car(x!1)")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          (("2"
                                                            (rewrite
                                                             "length_append")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "car(x!1)")
                                                  (("2"
                                                    (rewrite
                                                     "length_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (symmetric_closure const-decl "(symmetric?)" closure_ops orders)
    (preorder_closure const-decl "(preorder?)" closure_ops orders)
    (list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil))
   shostak))
 (TS_congruence_subset_alt 0
  (TS_congruence_subset_alt-1 nil 3849973328
   ("" (skeep)
    (("" (expand "TS_congruence")
      (("" (expand "TS_congruence_alt")
        (("" (name-replace "R1" "TS_reduction_rel(r)")
          (("" (name-replace "R2" "TS_reduction_rel_alt(r)")
            (("" (lemma "preorder_closure_is_monotone[string]")
              (("" (inst -1 "R1" "R2")
                (("" (assert)
                  (("" (prop)
                    (("1" (expand "subset?")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (assert)
                            (("1" (hide -2)
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "preorder_closure")
                                  (("1"
                                    (expand "transitive_closure")
                                    (("1"
                                      (expand "IUnion")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "i=0")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (inst 1 "1")
                                              (("1"
                                                (expand "iterate")
                                                (("1"
                                                  (expand "iterate")
                                                  (("1"
                                                    (expand "R2")
                                                    (("1"
                                                      (expand "o ")
                                                      (("1"
                                                        (inst 1 "x`1")
                                                        (("1"
                                                          (lemma
                                                           "TS_reduction_rel_alt_reflexive")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "r")
                                                            (("1"
                                                              (expand
                                                               "reflexive?")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x`1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst 2 "i")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "subset_alt")
                        (("2" (expand "R1")
                          (("2" (expand "R2")
                            (("2" (inst?)
                              (("2"
                                (expand "TS_reduction_rel")
                                (("2"
                                  (expand "subset?")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "symmetric_closure")
                                      (("2"
                                        (expand "union")
                                        (("2"
                                          (expand "member" -2)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "converse")
                                              (("2"
                                                (inst -2 "(x`2,x`1)")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "TS_reduction_rel_alt_symmetric")
                                                      (("2"
                                                        (inst -1 "r")
                                                        (("2"
                                                          (expand
                                                           "symmetric?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x`2"
                                                             "x`1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (preorder_closure_is_monotone formula-decl nil closure_ops orders)
    (symmetric_closure const-decl "(symmetric?)" closure_ops orders)
    (preorder_closure const-decl "(preorder?)" closure_ops orders)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (transitive_closure const-decl "(transitive?)" closure_ops orders))
   shostak))
 (TS_congruence_alt_subset 0
  (TS_congruence_alt_subset-1 nil 3850073093
   ("" (skeep)
    (("" (expand "TS_congruence_alt")
      (("" (lemma "preorder_closure_is_monotone[string]")
        (("" (inst -1 "TS_reduction_rel_alt(r)" "TS_congruence(r)")
          (("" (lemma "alt_subset")
            (("" (inst?)
              (("" (prop)
                ((""
                  (case "subset?(preorder_closure(TS_congruence(r)),TS_congruence(r))")
                  (("1" (lemma "subset_transitive[[string,string]]")
                    (("1"
                      (inst -1
                       "preorder_closure(TS_reduction_rel_alt(r))"
                       "preorder_closure(TS_congruence(r))"
                       "TS_congruence(r)")
                      (("1" (assert)
                        (("1" (hide -2 -3 -4)
                          (("1" (expand "subset?")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (expand "preorder_closure")
                                        (("1"
                                          (expand "transitive_closure")
                                          (("1"
                                            (expand "IUnion")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 1 "i")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (lemma "preorder_closure_identity[string]")
                      (("2" (inst -1 "TS_congruence(r)")
                        (("1" (replaces -1)
                          (("1" (expand "subset?")
                            (("1" (skeep) nil nil)) nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "TS_congruence")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder_closure const-decl "(preorder?)" closure_ops orders)
    (transitive_closure const-decl "(transitive?)" closure_ops orders)
    (preorder_closure_identity formula-decl nil closure_ops orders)
    (preorder_closure_is_monotone formula-decl nil closure_ops orders)
    (list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil))
   shostak))
 (TS_congruence_equality 0
  (TS_congruence_equality-1 nil 3850075316
   ("" (decompose-equality)
    (("" (decompose-equality)
      (("" (lemma "TS_congruence_alt_subset")
        (("" (lemma "TS_congruence_subset_alt")
          (("" (inst -1 "x!1")
            (("" (inst -2 "x!1")
              (("" (expand "subset?")
                (("" (inst -1 "(x!2,x!3)")
                  (("" (inst -2 "(x!2,x!3)")
                    (("" (prop)
                      (("1" (expand "member") (("1" (assert) nil nil))
                        nil)
                       ("2" (expand "member") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil))
   shostak))
 (TS_congruence_alt_context_closed 0
  (TS_congruence_alt_context_closed-1 nil 3858253036
   ("" (lemma "TS_congruence_context_closed")
    (("" (rewrite "TS_congruence_equality") nil nil)) nil)
   nil shostak))
 (TS_congruence_alt_split 0
  (TS_congruence_alt_split-1 nil 3858176728
   ("" (skeep)
    (("" (lemma "TS_congruence_alt_context_closed")
      (("" (inst-cp -1 "null" "B" "A" "C" "r")
        (("" (assert)
          (("" (expand "append" -2 (1 3))
            (("" (inst -1 "C" "null" "B" "D" "r")
              (("" (assert)
                (("" (rewrite "append_null")
                  (("" (rewrite "append_null")
                    (("" (hide -3 -4)
                      (("" (expand "TS_congruence_alt")
                        ((""
                          (typepred
                           "transitive_closure(TS_reduction_rel_alt(r))")
                          (("" (expand "transitive?")
                            ((""
                              (inst -1 "append(A,B)" "append(C,B)"
                               "append(C,D)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive_closure const-decl "(transitive?)" closure_ops orders)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil))
   shostak))
 (termination_reduces_congruence 0
  (termination_reduces_congruence-1 nil 3883742922
   (""
    (inst 1
     "lambda(pvs0: partial_recursive): (null,(: choose({a: letter| TRUE}) :)^(p_recursive2nat(pvs0)),if terminating?(pvs0) then (: choose({a: letter| TRUE}) :)^(p_recursive2nat(pvs0))
  elsif p_recursive2nat(pvs0) > 0 then null
  else (: choose({a: letter| TRUE}) :)  endif )")
    (("1" (skeep)
      (("1" (beta)
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "TS_congruence")
                  (("1" (expand "preorder_closure")
                    (("1" (expand "IUnion")
                      (("1" (inst 1 "0")
                        (("1" (expand "iterate")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "TS_congruence")
                      (("1" (expand "preorder_closure")
                        (("1" (expand "IUnion")
                          (("1" (skeep)
                            (("1" (expand "iterate")
                              (("1"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "o ")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand "TS_reduction_rel")
                                        (("2"
                                          (expand "symmetric_closure")
                                          (("2"
                                            (expand "union")
                                            (("2"
                                              (expand "converse")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (expand
                                                     "reduction_rel")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "i!1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (expand
                                                       "reduction_rel")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "i!1")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (case "p_recursive2nat(pvs0_1) = 0")
                      (("1" (replaces -1)
                        (("1" (expand "^")
                          (("1" (expand "TS_congruence")
                            (("1" (expand "preorder_closure")
                              (("1"
                                (expand "IUnion")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "iterate")
                                    (("1"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "Alphabet") (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((injective? const-decl "bool" functions nil)
    (cons2nat def-decl "nat" mf_pvs0_computable nil)
    (rac const-decl "T" more_list_props structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (symmetric_closure const-decl "(symmetric?)" closure_ops orders)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (member const-decl "bool" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduction_rel const-decl "bool" string_rewriting nil)
    (union const-decl "set" sets nil)
    (TS_reduction_rel const-decl "pred[[string, string]]"
     string_rewriting nil)
    (O const-decl "bool" relation_props nil)
    (append def-decl "list[T]" list_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (terminates_expr const-decl "bool" mf_pvs0_expr nil)
    (nth def-decl "T" list_props nil) nil
    (listPVS0nat2nat const-decl "nat" mf_pvs0_computable nil)
    (listnat2nat const-decl "nat" mf_pvs0_computable nil)
    (tuple2nat const-decl "nat" tuple2nat numbers)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TS_congruence const-decl "pred[[string, string]]" string_rewriting
     nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (preorder_closure const-decl "(preorder?)" closure_ops orders)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (choose const-decl "(p)" sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_rewriting_rules type-eq-decl nil string_rewriting nil)
    (rewriting_rule type-eq-decl nil string_rewriting nil)
    (string type-eq-decl nil string_rewriting nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (mf_PVS0Expr type-decl nil mf_PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lmf_PVS0Expr type-eq-decl nil mf_pvs0_expr nil)
    (PVS0 type-eq-decl nil mf_pvs0_expr nil)
    (false_val const-decl "nat" mf_pvs0_basic_programs nil)
    (lop1 const-decl "list[[nat -> nat]]" mf_pvs0_basic_programs nil)
    (lop2 const-decl "list[[[nat, nat] -> nat]]" mf_pvs0_basic_programs
     nil)
    (partial_recursive? const-decl "bool" mf_pvs0_computable nil)
    (partial_recursive type-eq-decl nil mf_pvs0_computable nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (terminating? const-decl "bool" mf_pvs0_lang nil)
    (> const-decl "bool" reals nil)
    (p_recursive2nat const-decl "nat" mf_pvs0_Recursion_Theorem nil)
    (T formal-nonempty-type-decl nil string_rewriting nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Alphabet formal-const-decl "non_empty_finite_set[T]"
     string_rewriting nil)
    (letter type-eq-decl nil string_rewriting nil)
    (nonempty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (congruence_undecidability 0
  (congruence_undecidability-1 nil 3883146194
   ("" (lemma "uniform_halting_problem_undecidability_Turing_complete")
    (("" (skeep)
      (("" (inst 1 "oracle")
        (("" (skeep) (("" (postpone) nil nil)) nil)) nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (terminating? const-decl "bool" mf_pvs0_lang nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (symmetric_closure const-decl "(symmetric?)" closure_ops orders)
    (preorder_closure const-decl "(preorder?)" closure_ops orders)
    (p_recursive2nat const-decl "nat" mf_pvs0_Recursion_Theorem nil)
    (partial_recursive type-eq-decl nil mf_pvs0_computable nil)
    (partial_recursive? const-decl "bool" mf_pvs0_computable nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (mf_PVS0Expr type-decl nil mf_PVS0Expr_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lmf_PVS0Expr type-eq-decl nil mf_pvs0_expr nil)
    (PVS0 type-eq-decl nil mf_pvs0_expr nil)
    (false_val const-decl "nat" mf_pvs0_basic_programs nil)
    (lop1 const-decl "list[[nat -> nat]]" mf_pvs0_basic_programs nil)
    (lop2 const-decl "list[[[nat, nat] -> nat]]" mf_pvs0_basic_programs
     nil)
    (computable? const-decl "bool" mf_pvs0_computable nil)
    (computable type-eq-decl nil mf_pvs0_computable nil)
    (uniform_halting_problem_undecidability_Turing_complete
     formula-decl nil mf_pvs0_Rices_Theorem_Corollaries nil))
   shostak)))

