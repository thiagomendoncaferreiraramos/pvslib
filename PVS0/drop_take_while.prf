(drop_take_while
 (dropWhile_TCC1 0
  (dropWhile_TCC1-1 nil 3847800608 ("" (subtype-tcc) nil nil) nil nil
   (dropWhile subtype "drop_take_while.l"
    "(list_adt[drop_take_while.T].cons?)")))
 (dropWhile_TCC2 0
  (dropWhile_TCC2-1 nil 3847800608 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (dropWhile termination
    "drop_take_while.dropWhile(drop_take_while.P)(list_adt[drop_take_while.T].cdr(drop_take_while.l))"
    "nil")))
 (take_first_drop_while 0
  (take_first_drop_while-1 nil 3847800614
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (expand "takeWhile" 1)
        (("" (expand "firstWhile" 1)
          (("" (expand "dropWhile" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "append" 1 1)
                  (("2" (inst -2 "cdr(x!1)")
                    (("2" (inst?)
                      (("2" (expand "length" -2 2)
                        (("2" (assert)
                          (("2" (replaces -2)
                            (("2" (decompose-equality) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "append" 2 1)
                  (("3" (expand "append" 2)
                    (("3" (expand "append" 2)
                      (("3" (decompose-equality) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (takeWhile_P 0
  (takeWhile_P-1 nil 3852035802
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (skeep)
        (("" (expand "takeWhile" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (typepred "i") (("1" (grind) nil nil)) nil)
               ("2" (expand " nth" 1)
                (("2" (assert)
                  (("2" (prop)
                    (("2" (inst -2 "cdr(x!1)")
                      (("2" (inst -2 "P")
                        (("2" (expand "length" -2 2)
                          (("2" (inst -2 "i-1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (typepred "i")
                (("3" (expand "takeWhile" -1)
                  (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (member_firstWhile_TCC1 0
  (member_firstWhile_TCC1-1 nil 3853234805
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (skeep*)
        (("" (expand "member" -2)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "firstWhile") (("1" (assert) nil nil)) nil)
               ("2" (expand "firstWhile" 3)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (inst -3 "cdr(x!1)")
                        (("1" (inst -3 "P")
                          (("1" (expand "length" -3 2)
                            (("1" (prop)
                              (("1" (inst -1 "e2") nil nil)
                               ("2"
                                (inst 1 "e1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 2) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (firstWhile def-decl "list[T]" drop_take_while nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil drop_take_while nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil
   (member_firstWhile subtype
    "drop_take_while.firstWhile(drop_take_while.P)(drop_take_while.l)"
    "(list_adt[drop_take_while.T].cons?)")))
 (member_firstWhile 0
  (member_firstWhile-1 nil 3853325272
   ("" (measure-induct+ "length(l)" "l")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand "member" -2)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (inst 3 "e1")
                (("1" (expand "firstWhile" 3) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (inst -2 "cdr(x!1)")
                (("2" (inst -2 "P")
                  (("2" (expand "length" -2 2)
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (expand "firstWhile" 3)
                          (("1" (case "P(car(x!1))")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2" (inst 4 "car(x!1)") nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst 1 "e1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "member_firstWhile_TCC1")
      (("2" (hide-all-but (-1 -3 1)) (("2" (grind) nil nil)) nil)) nil)
     ("3" (hide-all-but (-1 1))
      (("3" (lemma "member_firstWhile_TCC1") (("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((member_firstWhile_TCC1 subtype-tcc nil drop_take_while nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (firstWhile def-decl "list[T]" drop_take_while nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil drop_take_while nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (firstWhile_diff_pred 0
  (firstWhile_diff_pred-1 nil 3854444788
   ("" (induct "l") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil drop_take_while nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (firstWhile def-decl "list[T]" drop_take_while nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (firstWhile_diff_pred_not_member 0
  (firstWhile_diff_pred_not_member-1 nil 3855144842
   ("" (induct "l") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((/= const-decl "boolean" notequal nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil drop_take_while nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (diff const-decl "bool" drop_take_while nil)
    (firstWhile def-decl "list[T]" drop_take_while nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (takeWhile_split 0
  (takeWhile_split-1 nil 3855409996
   ("" (induct "l1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil drop_take_while nil)
    (append def-decl "list[T]" list_props nil)
    (takeWhile def-decl "list[T]" drop_take_while nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

